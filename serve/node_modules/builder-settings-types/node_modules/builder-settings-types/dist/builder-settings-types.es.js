const B = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
let I = (r = 21) => {
  let t = "", e = crypto.getRandomValues(new Uint8Array(r |= 0));
  for (; r--; )
    t += B[e[r] & 63];
  return t;
};
function R(r, t) {
  for (const e in r)
    if (r.hasOwnProperty(e)) {
      const i = r[e];
      t(e, i);
    }
}
const b = class b {
  constructor(t) {
    this.elementRef = null, this.isHidden = !1, this.custom = !1, this.initialValues = {}, this.changeTimeout = null, this.isHandlingChange = !1, this.changeHandlers = /* @__PURE__ */ new Set(), this.blurTimeout = null, this.lastValues = {}, this.lastChangeTime = 0, this.CHANGE_DEBOUNCE = 100, this.handleBlur = () => {
    }, this.id = t.id || I(), this.title = t.title, this.settings = t.settings, this.description = t.description, this.icon = t.icon, this.isCollapsed = t.collapsed ?? !1, this.isMain = t.main ?? !1, this.custom = t.custom ?? !1, this.hideCondition = t.hideCondition, this.onBlur = t.onBlur, Object.assign(this, t.settings), this.initialValues = this.getValues();
  }
  static hide() {
    this.hiddenElements.forEach((t) => {
      t && (t.style.display = "none");
    });
  }
  static show() {
    this.hiddenElements.forEach((t) => {
      t && (t.style.display = "");
    });
  }
  setOnChange(t) {
    this.onChange = t;
    const e = () => {
      this.isHandlingChange || (this.isHandlingChange = !0, this.changeTimeout && clearTimeout(this.changeTimeout), this.changeTimeout = setTimeout(() => {
        const i = this.getValues();
        this.lastChangeTime = Date.now(), t(i), this.updateVisibility(), this.isHandlingChange = !1;
      }, 50));
    };
    return this.changeHandlers.clear(), R(this.settings, (i, s) => {
      const n = () => {
        this.isHandlingChange || e();
      };
      this.changeHandlers.add(n), s instanceof b, s.setOnChange(n);
    }), this;
  }
  setOnBlur(t) {
    return this.onBlur = t, this.elementRef && (this.elementRef.removeEventListener("focusout", this.handleBlur), this.handleBlur = (e) => {
      this.blurTimeout && clearTimeout(this.blurTimeout);
      const i = this.getValues(), s = this.calculateChanges(
        this.initialValues,
        i
      );
      Object.keys(s).length > 0 && Date.now() - this.lastChangeTime > this.CHANGE_DEBOUNCE && (t(), this.updateVisibility(), this.initialValues = i);
    }, this.elementRef.addEventListener("focusout", this.handleBlur, !0)), this;
  }
  // Clean up method to be called when the group is destroyed
  cleanup() {
    this.changeTimeout && (clearTimeout(this.changeTimeout), this.changeTimeout = null), this.blurTimeout && (clearTimeout(this.blurTimeout), this.blurTimeout = null), this.elementRef && this.elementRef.removeEventListener("focusout", this.handleBlur), this.changeHandlers.clear();
  }
  calculateChanges(t, e) {
    const i = {};
    for (const s in e)
      if (e.hasOwnProperty(s))
        if (typeof e[s] == "object" && e[s] !== null) {
          const n = this.calculateChanges(
            t[s] || {},
            e[s]
          );
          Object.keys(n).length > 0 && (i[s] = n);
        } else t[s] !== e[s] && (i[s] = {
          from: t[s],
          to: e[s]
        });
    return i;
  }
  hide() {
    this.elementRef && (this.elementRef.style.display = "none", this.isHidden = !0);
  }
  show() {
    this.elementRef && (this.elementRef.style.display = "", this.isHidden = !1);
  }
  getValues(t) {
    if (t === void 0) {
      const e = {};
      for (const i in this.settings)
        if (this.settings.hasOwnProperty(i)) {
          const s = this.settings[i];
          s instanceof b ? e[i] = s.getValues() : e[i] = s.value;
        }
      return e;
    } else {
      const e = this.settings[t];
      return e ? e instanceof b ? e.getValues() : e.value : void 0;
    }
  }
  draw() {
    const t = document.createElement("div");
    t.className = "setting-group", t.id = `setting-group-${this.id}`, b.hiddenElements.add(t), this.hideCondition && this.hideCondition() && (t.style.display = "none"), this.isMain && t.classList.add("main-group");
    const e = document.createElement("div");
    e.className = "setting-group-title", this.isCollapsed && e.classList.add("collapsed-view"), e.setAttribute("role", "button"), e.setAttribute(
      "aria-expanded",
      (!this.isCollapsed).toString()
    ), e.setAttribute("tabindex", "0");
    const i = document.createElement("div");
    if (i.className = "title-section", this.icon) {
      const h = document.createElement("span");
      h.className = "group-icon", h.innerHTML = this.icon, i.appendChild(h);
    }
    this.custom && t.classList.add("custom_class");
    const s = document.createElement("h3");
    s.textContent = this.title, i.appendChild(s);
    const n = document.createElement("div");
    if (n.className = "actions-section", this.description && this.isCollapsed) {
      const h = document.createElement("span");
      h.className = "info-marker", h.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M8 5.33333V8M8 10.6667H8.00667M14 8C14 11.3137 11.3137 14 8 14C4.68629 14 2 11.3137 2 8C2 4.68629 4.68629 2 8 2C11.3137 2 14 4.68629 14 8Z" 
            stroke="currentColor" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      `, h.title = this.description, n.appendChild(h);
    }
    const a = document.createElement("span");
    a.className = "setting-group-arrow", a.innerHTML = `
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M4 6L8 10L12 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    `, this.isCollapsed && a.classList.add("rotated"), n.appendChild(a);
    const o = document.createElement("div");
    if (o.className = "setting-group-content", this.isCollapsed && (o.classList.add("collapsed"), e.classList.add("collapsed-view"), a.classList.add("rotated"), t.classList.add("collapsed")), this.isMain && o.classList.add("main-content"), this.description && !this.isCollapsed) {
      const h = document.createElement("div");
      h.className = "setting-group-description", h.textContent = this.description, o.appendChild(h);
    }
    const l = () => {
      this.isCollapsed = !this.isCollapsed, o.classList.toggle("collapsed"), e.classList.toggle("collapsed-view"), a.classList.toggle("rotated"), t.classList.toggle("collapsed", this.isCollapsed), e.setAttribute(
        "aria-expanded",
        (!this.isCollapsed).toString()
      );
      const h = o.querySelector(
        ".setting-group-description"
      ), u = n.querySelector(".info-marker");
      if (this.description)
        if (this.isCollapsed) {
          if (h && h.remove(), !u) {
            const p = document.createElement("span");
            p.className = "info-marker", p.innerHTML = `
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M8 5.33333V8M8 10.6667H8.00667M14 8C14 11.3137 11.3137 14 8 14C4.68629 14 2 11.3137 2 8C2 4.68629 4.68629 2 8 2C11.3137 2 14 4.68629 14 8Z" 
                  stroke="currentColor" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            `, p.title = this.description, n.insertBefore(p, a);
          }
        } else {
          if (!h) {
            const p = document.createElement("div");
            p.className = "setting-group-description", p.textContent = this.description, o.insertBefore(
              p,
              o.firstChild
            );
          }
          u && u.remove();
        }
    };
    if (e.onclick = l, e.onkeydown = (h) => {
      (h.key === "Enter" || h.key === " ") && (h.preventDefault(), l());
    }, Object.keys(this.settings).length > 0) {
      for (const h in this.settings)
        if (this.settings.hasOwnProperty(h)) {
          const u = this.settings[h];
          o.appendChild(u.draw());
        }
    } else {
      const h = document.createElement("div");
      h.className = "setting-group-empty", h.textContent = "No settings in this group", o.appendChild(h);
    }
    return e.appendChild(i), e.appendChild(n), t.appendChild(e), t.appendChild(o), this.elementRef = t, t;
  }
  collapse() {
    if (!this.elementRef || this.isCollapsed) return;
    const t = this.elementRef.querySelector(
      ".setting-group-content"
    ), e = this.elementRef.querySelector(".setting-group-arrow"), i = this.elementRef.querySelector(
      ".setting-group-title"
    );
    t && e && i && (this.isCollapsed = !0, t.classList.add("collapsed"), e.classList.add("rotated"), i.setAttribute("aria-expanded", "false"));
  }
  expand() {
    if (!this.elementRef || !this.isCollapsed) return;
    const t = this.elementRef.querySelector(
      ".setting-group-content"
    ), e = this.elementRef.querySelector(".setting-group-arrow"), i = this.elementRef.querySelector(
      ".setting-group-title"
    );
    t && e && i && (this.isCollapsed = !1, t.classList.remove("collapsed"), e.classList.remove("rotated"), i.setAttribute("aria-expanded", "true"));
  }
  updateVisibility() {
    this.elementRef && this.hideCondition && (this.elementRef.style.display = this.hideCondition() ? "none" : "");
  }
  toggle() {
    this.isHidden ? this.show() : this.hide();
  }
};
b.hiddenElements = /* @__PURE__ */ new Set();
let f = b;
function W(r) {
  switch (r) {
    case "number":
      return 0;
    case "text":
      return "";
    case "select":
      return null;
    case "color":
      return "#000000";
    case "date":
      return (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    case "button":
      return "";
    default:
      return "";
  }
}
class m {
  constructor(t = {}) {
    this.props = t, this.id = t.id || I(), this.value = this.props.default, this.title = t.title || "";
  }
  destroy() {
    throw new Error("Method not implemented.");
  }
  setOnChange(t) {
    return this.onChange = t, this;
  }
  setValue(t) {
    this.value = t, this.inputEl && (this.inputEl.value = String(t)), this.onChange && this.onChange(t), this.props.detectChange && this.props.detectChange(t);
  }
  createInput(t) {
    t = { ...this.props.inputProps, ...t };
    const e = document.createElement("div");
    if (e.className = t.wrapperClassName || "", t.title || t.icon) {
      const a = document.createElement("div");
      if (a.className = "icon-container", t.icon) {
        const o = this.createIcon(t.icon, t.iconClassName);
        a.appendChild(o);
      }
      if (t.title) {
        const o = this.createLabel(t.title, t.labelClassName);
        a.appendChild(o);
      }
      e.appendChild(a);
    }
    const i = document.createElement("div");
    i.className = t.wrapperClassName || "";
    const s = document.createElement("input");
    this.inputEl = s, s.value = String(t.value || W(t.inputType)), s.type = t.inputType, s.placeholder = t.placeholder || "", s.className = t.inputClassName || "";
    const n = (a) => {
      const o = a.target;
      let l = o.value;
      switch (t.inputType) {
        case "number":
          l = Number(o.value);
          break;
        case "color":
          l = o.value;
          break;
        case "date":
          l = o.value;
          break;
        case "select":
          l = o.value;
          break;
        case "text":
          l = o.value;
          break;
        case "button":
          l = o.value;
          break;
        default:
          l = o.value;
      }
      this.value = l, this.onChange && this.onChange(this.value), this.props.detectChange && this.props.detectChange(this.value);
    };
    return s.addEventListener("input", n), s.addEventListener("change", n), t.inputCustomizer && t.inputCustomizer(s), i.appendChild(s), e.appendChild(i), e;
  }
  createLabel(t, e) {
    const i = document.createElement("span");
    return i.textContent = t, i.className = "input-label " + (e || ""), i;
  }
  createIcon(t, e) {
    const i = document.createElement("span");
    return i.className = "input-icon " + (e || ""), i.innerHTML = t, i;
  }
}
class H extends m {
  constructor(t = {}) {
    super(t), this.inputType = "text", t.onChange && this.setOnChange(t.onChange);
  }
  draw() {
    const t = (e) => {
      this.props.maxLength !== void 0 && (e.maxLength = this.props.maxLength), this.props.className && e.classList.add(this.props.className);
    };
    return this.createInput({
      value: this.value,
      inputType: this.inputType,
      title: this.props.title,
      placeholder: this.props.placeholder,
      icon: this.props.icon,
      inputClassName: "string-setting-input " + (this.props.inputClassName || ""),
      wrapperClassName: "string-setting-wrapper " + (this.props.wrapperClassName || ""),
      inputCustomizer: t
    });
  }
}
const O = "<svg xmlns='http://www.w3.org/2000/svg' width='18' height='19' viewBox='0 0 18 19' fill='none'><path d='M8.99999 15.8542C9.79613 16.5667 10.8475 17 12 17C14.4853 17 16.5 14.9853 16.5 12.5C16.5 10.4248 15.0953 8.67769 13.1849 8.15763M4.81513 8.15762C2.9047 8.67768 1.5 10.4248 1.5 12.5C1.5 14.9853 3.51472 17 6 17C8.48528 17 10.5 14.9853 10.5 12.5C10.5 11.9146 10.3882 11.3554 10.1849 10.8424M13.5 6.5C13.5 8.98528 11.4853 11 9 11C6.51472 11 4.5 8.98528 4.5 6.5C4.5 4.01472 6.51472 2 9 2C11.4853 2 13.5 4.01472 13.5 6.5Z' stroke='#667085' stroke-linecap='round' stroke-linejoin='round'/></svg>";
class S extends H {
  constructor(t) {
    super({
      ...t,
      icon: t.icon || O,
      title: t.title || "Color"
    }), this.inputType = "color", this.detectChange = t.detectChange;
  }
  hexToRgb(t) {
    t = t.replace("#", "");
    const e = parseInt(t.substring(0, 2), 16), i = parseInt(t.substring(2, 4), 16), s = parseInt(t.substring(4, 6), 16);
    return `${e}, ${i}, ${s}`;
  }
  rgbToHex(t) {
    const [e, i, s] = t.split(",").map((a) => parseInt(a.trim()));
    if (isNaN(e) || isNaN(i) || isNaN(s)) return "#000000";
    const n = (a) => {
      const o = a.toString(16);
      return o.length === 1 ? "0" + o : o;
    };
    return `#${n(e)}${n(i)}${n(s)}`;
  }
  draw() {
    const t = document.createElement("div");
    t.className = "color-setting-wrapper";
    const e = document.createElement("div");
    e.className = "icon-container";
    const i = this.createIcon(this.props.icon || O), s = this.createLabel(this.title || "Color");
    e.appendChild(i), e.appendChild(s);
    const n = document.createElement("div");
    n.className = "color-input-wrapper";
    const a = (p) => {
      const g = p.value.split(",").map((T) => parseInt(T.trim()));
      if (g.length !== 3 || g.some(isNaN))
        return p.style.border = "1px solid red", !1;
      const [d, C, v] = g, L = d >= 0 && d <= 255 && C >= 0 && C <= 255 && v >= 0 && v <= 255;
      return p.style.border = L ? "" : "1px solid red", L;
    }, o = document.createElement("div");
    o.className = "color-preview", o.style.backgroundColor = this.value ? `rgb(${this.value})` : "";
    const l = this.createInput({
      value: this.value,
      inputType: "text",
      inputClassName: "color-text-input"
    }), c = l.querySelector("input"), h = this.createInput({
      value: this.value ? this.rgbToHex(this.value) : "",
      inputType: this.inputType,
      inputClassName: "color-picker"
    }), u = h.querySelector("input");
    return c.oninput = (p) => {
      var d;
      let g = p.target.value.trim();
      a(c) && (this.value = g, (d = this.onChange) == null || d.call(this, g), u.value = this.rgbToHex(g), o.style.backgroundColor = `rgb(${g})`);
    }, u.oninput = (p) => {
      var C, v;
      const g = p.target.value, d = this.hexToRgb(g);
      this.value = d, (C = this.onChange) == null || C.call(this, d), (v = this.detectChange) == null || v.call(this, d), c.value = d, o.style.backgroundColor = `rgb(${d})`;
    }, u.onchange = (p) => {
      var C, v;
      const g = p.target.value, d = this.hexToRgb(g);
      this.value = d, (C = this.onChange) == null || C.call(this, d), (v = this.detectChange) == null || v.call(this, d), c.value = d, o.style.backgroundColor = `rgb(${d})`;
    }, n.appendChild(o), n.appendChild(h), n.appendChild(l), t.appendChild(e), t.appendChild(n), this.value && (c.value = this.value, u.value = this.rgbToHex(this.value), o.style.backgroundColor = `rgb(${this.value})`), t;
  }
}
class w extends m {
  constructor(t = {}) {
    super(t), this.inputType = "number";
  }
  draw() {
    const t = (n) => {
      this.props.minValue !== void 0 && (n.min = String(this.props.minValue)), this.props.maxValue !== void 0 && (n.max = String(this.props.maxValue)), this.props.className && n.classList.add(this.props.className), n.addEventListener("input", () => {
        const a = this.props.minValue ?? Number.MIN_SAFE_INTEGER, o = this.props.maxValue ?? Number.MAX_SAFE_INTEGER;
        let l = Number(n.value);
        l < a && (l = a), l > o && (l = o), n.value = String(l);
      });
    }, e = this.createInput({
      value: this.value,
      inputType: this.inputType,
      title: this.props.title,
      icon: this.props.icon,
      inputClassName: "number-setting-input " + (this.props.inputClassName || ""),
      wrapperClassName: "number-setting-wrapper " + (this.props.wrapperClassName || ""),
      inputCustomizer: t
    });
    if (!this.props.suffix || this.props.suffix === "none")
      return e;
    e.classList.add("suffix-wrapper");
    const i = e.querySelector(
      "input.number-setting-input"
    );
    i && (i.style.paddingRight = "35px");
    const s = document.createElement("span");
    return s.className = "suffix-label", s.textContent = this.props.suffix, e.appendChild(s), e;
  }
}
class M extends w {
  constructor(t) {
    super({
      ...t,
      minValue: 0,
      maxValue: 100,
      icon: t.icon || A,
      title: t.title || "Opacity"
    }), this.inputType = "number";
  }
}
const A = `
			<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M3.69749 15.365C3.54749 15.365 3.40502 15.305 3.30002 15.2C1.77752 13.6775 0.9375 11.6525 0.9375 9.5C0.9375 5.0525 4.5525 1.4375 9 1.4375C11.1525 1.4375 13.1775 2.2775 14.7 3.8C14.805 3.905 14.865 4.0475 14.865 4.1975C14.865 4.3475 14.805 4.49 14.7 4.595L4.09502 15.2C3.99002 15.305 3.84749 15.365 3.69749 15.365ZM9 2.5625C5.175 2.5625 2.0625 5.675 2.0625 9.5C2.0625 11.165 2.64751 12.74 3.71251 13.9925L13.4925 4.2125C12.24 3.1475 10.665 2.5625 9 2.5625Z" fill="#667085"/>
  <path d="M9.00014 17.5623C6.84764 17.5623 4.82266 16.7223 3.30016 15.1998C3.19516 15.0948 3.13513 14.9523 3.13513 14.8023C3.13513 14.6523 3.19516 14.5098 3.30016 14.4048L13.9051 3.79984C14.1226 3.58234 14.4826 3.58234 14.7001 3.79984C16.2226 5.32234 17.0626 7.34734 17.0626 9.49984C17.0626 13.9473 13.4476 17.5623 9.00014 17.5623ZM4.50764 14.7873C5.76014 15.8523 7.33514 16.4373 9.00014 16.4373C12.8251 16.4373 15.9376 13.3248 15.9376 9.49984C15.9376 7.83484 15.3526 6.25984 14.2876 5.00734L4.50764 14.7873Z" fill="#667085"/>
  <path d="M10.0575 17.4873C9.91496 17.4873 9.77248 17.4348 9.65998 17.3223L5.41496 13.0773C5.19746 12.8598 5.19746 12.4998 5.41496 12.2823C5.63246 12.0648 5.9925 12.0648 6.21 12.2823L10.455 16.5273C10.6725 16.7448 10.6725 17.1048 10.455 17.3223C10.35 17.4348 10.2075 17.4873 10.0575 17.4873Z" fill="#667085"/>
  <path d="M13.4025 15.5225C13.26 15.5225 13.1175 15.47 13.005 15.3575L8.06999 10.4225C7.85249 10.205 7.85249 9.84498 8.06999 9.62748C8.28749 9.40998 8.64748 9.40998 8.86498 9.62748L13.8 14.5625C14.0175 14.78 14.0175 15.14 13.8 15.3575C13.6875 15.47 13.545 15.5225 13.4025 15.5225Z" fill="#667085"/>
  <path d="M15.84 12.6648C15.6975 12.6648 15.555 12.6123 15.4425 12.4998L10.725 7.78234C10.5075 7.56484 10.5075 7.20484 10.725 6.98734C10.9425 6.76984 11.3025 6.76984 11.52 6.98734L16.2375 11.7048C16.455 11.9223 16.455 12.2823 16.2375 12.4998C16.1325 12.6048 15.99 12.6648 15.84 12.6648Z" fill="#667085"/>
</svg>
		`, $ = `
  <svg xmlns="http://www.w3.org/2000/svg" class="svg-select" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down">
    <polyline points="6 9 12 15 18 9"></polyline>
  </svg>
`;
class N extends m {
  constructor(t = {}) {
    if (super(t), this.inputType = "select", this._options = [], this.isOpen = !1, this.selectedOptionIndex = null, this.optionsListEl = null, this.svgContainer = null, this.buttonEl = null, this.isLoading = !1, this.container = null, this.clickOutsideListener = null, t.options && (this._options = [...t.options]), t.getOptions && this._options.push(...t.getOptions()), t.getOptionsAsync && (this.isLoading = !0), this.value !== void 0) {
      const e = this._options.findIndex((i) => i.value === this.value);
      e >= 0 && (this.selectedOptionIndex = e);
    }
  }
  createOption(t, e) {
    const i = document.createElement("li");
    return i.classList.add("select-option"), i.textContent = t.name, i.dataset.index = String(e), this.selectedOptionIndex === e && i.classList.add("selected"), i;
  }
  draw() {
    const t = document.createElement("div");
    if (t.classList.add("select-container"), this.container = t, this.props.icon || this.props.title) {
      const n = document.createElement("div");
      if (n.className = "icon-container", this.props.icon) {
        const a = this.createIcon(this.props.icon);
        n.appendChild(a);
      }
      if (this.props.title) {
        const a = this.createLabel(this.props.title);
        n.appendChild(a);
      }
      t.appendChild(n);
    } else {
      const n = document.createElement("div");
      t.appendChild(n);
    }
    const e = document.createElement("div");
    e.classList.add("select-button"), this.isLoading ? e.classList.add("loading") : e.textContent = this.selectedOptionIndex !== null ? this._options[this.selectedOptionIndex].name : this.props.placeholder || "Select an option", e.onclick = () => {
      var n, a;
      this.isLoading || (this.isOpen = !this.isOpen, (n = this.optionsListEl) == null || n.classList.toggle("open", this.isOpen), (a = this.svgContainer) == null || a.classList.toggle("open", this.isOpen));
    }, t.appendChild(e), this.buttonEl = e;
    const i = document.createElement("ul");
    i.classList.add("select-options"), this._options.forEach((n, a) => {
      const o = this.createOption(n, a);
      o.onclick = (l) => this.selectOption(l, a, e), i.appendChild(o);
    }), t.appendChild(i);
    const s = document.createElement("div");
    return s.classList.add("svg-container"), s.innerHTML = $, t.appendChild(s), this.optionsListEl = i, this.svgContainer = s, this.props.getOptionsAsync && (this.isLoading = !0, this.updateButtonText(), this.props.getOptionsAsync().then((n) => {
      this._options.push(...n), this.isLoading = !1, this.updateOptionsList(), this.updateButtonText();
    }).catch((n) => {
      console.error("Failed to fetch async options:", n), this.isLoading = !1, this.updateButtonText("Failed to load options");
    })), this.clickOutsideListener && document.removeEventListener("click", this.clickOutsideListener), this.clickOutsideListener = (n) => {
      var a, o;
      this.isOpen && !t.contains(n.target) && (this.isOpen = !1, (a = this.optionsListEl) == null || a.classList.remove("open"), (o = this.svgContainer) == null || o.classList.remove("open"));
    }, document.addEventListener("click", this.clickOutsideListener), t;
  }
  selectOption(t, e, i) {
    var n, a, o;
    const s = this._options[e];
    s && (this.value = s.value, (n = this.onChange) == null || n.call(this, this.value), this.selectedOptionIndex = e, this.isOpen = !1, i.textContent = s.name, (a = this.optionsListEl) == null || a.classList.remove("open"), (o = this.svgContainer) == null || o.classList.remove("open"), this.optionsListEl && this.optionsListEl.querySelectorAll(".select-option").forEach((c, h) => {
      h === e ? c.classList.add("selected") : c.classList.remove("selected");
    }));
  }
  updateOptionsList() {
    if (this.optionsListEl) {
      if (this.optionsListEl.innerHTML = "", this._options.length === 0) {
        const t = document.createElement("li");
        t.classList.add("select-option", "empty-message"), t.textContent = "No options available", this.optionsListEl.appendChild(t);
        return;
      }
      this._options.forEach((t, e) => {
        const i = this.createOption(t, e);
        i.onclick = (s) => {
          this.buttonEl && this.selectOption(s, e, this.buttonEl);
        }, this.optionsListEl.appendChild(i);
      });
    }
  }
  updateButtonText(t) {
    if (!this.buttonEl) return;
    if (this.isLoading) {
      this.buttonEl.classList.add("loading"), this.buttonEl.textContent = this.props.loadingText || "Loading options...";
      return;
    }
    this.buttonEl.classList.remove("loading", "error");
    let e;
    t ? ((t.includes("Failed") || t.includes("Error")) && this.buttonEl.classList.add("error"), e = t) : this.selectedOptionIndex !== null && this._options[this.selectedOptionIndex] ? e = this._options[this.selectedOptionIndex].name : e = this.props.placeholder || "Select an option", this.buttonEl.textContent = e;
  }
  destroy() {
    this.clickOutsideListener && (document.removeEventListener("click", this.clickOutsideListener), this.clickOutsideListener = null), super.destroy();
  }
}
class G extends m {
  constructor(t = {}) {
    super(t), this.inputType = "button", this.value || (this.value = "center");
  }
  draw() {
    const t = document.createElement("div");
    t.className = "align-setting-wrapper";
    const e = document.createElement("label");
    e.className = "align-setting-label", e.textContent = this.title || "Align", t.appendChild(e);
    const i = document.createElement("div");
    return i.className = "align-options-container", [
      {
        name: "left",
        icon: `
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
            <path d="M10.5 7.5C11.1989 7.5 11.5484 7.5 11.824 7.38582C12.1916 7.23358 12.4836 6.94157 12.6358 6.57402C12.75 6.29837 12.75 5.94891 12.75 5.25C12.75 4.55109 12.75 4.20163 12.6358 3.92598C12.4836 3.55843 12.1916 3.26642 11.824 3.11418C11.5484 3 11.1989 3 10.5 3L4.5 3C3.80109 3 3.45163 3 3.17598 3.11418C2.80843 3.26642 2.51642 3.55843 2.36418 3.92597C2.25 4.20163 2.25 4.55109 2.25 5.25C2.25 5.94891 2.25 6.29837 2.36418 6.57402C2.51642 6.94157 2.80843 7.23358 3.17598 7.38582C3.45163 7.5 3.80109 7.5 4.5 7.5L10.5 7.5Z"
                  stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M13.5 15C14.1989 15 14.5484 15 14.824 14.8858C15.1916 14.7336 15.4836 14.4416 15.6358 14.074C15.75 13.7984 15.75 13.4489 15.75 12.75C15.75 12.0511 15.75 11.7016 15.6358 11.426C15.4836 11.0584 15.1916 10.7664 14.824 10.6142C14.5484 10.5 14.1989 10.5 13.5 10.5H4.5C3.80109 10.5 3.45163 10.5 3.17598 10.6142C2.80843 10.7664 2.51642 11.0584 2.36418 11.426C2.25 11.7016 2.25 12.0511 2.25 12.75C2.25 13.4489 2.25 13.7984 2.36418 14.074C2.51642 14.4416 2.80843 14.7336 3.17597 14.8858C3.45163 15 3.80109 15 4.5 15L13.5 15Z"
                  stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        `
      },
      {
        name: "center",
        icon: `
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
            <path d="M12 7.5C12.6989 7.5 13.0484 7.5 13.324 7.38582C13.6916 7.23358 13.9836 6.94157 14.1358 6.57402C14.25 6.29837 14.25 5.94891 14.25 5.25C14.25 4.55109 14.25 4.20163 14.1358 3.92598C13.9836 3.55843 13.6916 3.26642 13.324 3.11418C13.0484 3 12.6989 3 12 3L6 3C5.30109 3 4.95163 3 4.67598 3.11418C4.30843 3.26642 4.01642 3.55843 3.86418 3.92597C3.75 4.20163 3.75 4.55109 3.75 5.25C3.75 5.94891 3.75 6.29837 3.86418 6.57402C4.01642 6.94157 4.30843 7.23358 4.67598 7.38582C4.95163 7.5 5.30109 7.5 6 7.5L12 7.5Z"
                  stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M13.5 15C14.1989 15 14.5484 15 14.824 14.8858C15.1916 14.7336 15.4836 14.4416 15.6358 14.074C15.75 13.7984 15.75 13.4489 15.75 12.75C15.75 12.0511 15.75 11.7016 15.6358 11.426C15.4836 11.0584 15.1916 10.7664 14.824 10.6142C14.5484 10.5 14.1989 10.5 13.5 10.5H4.5C3.80109 10.5 3.45163 10.5 3.17598 10.6142C2.80843 10.7664 2.51642 11.0584 2.36418 11.426C2.25 11.7016 2.25 12.0511 2.25 12.75C2.25 13.4489 2.25 13.7984 2.36418 14.074C2.51642 14.4416 2.80843 14.7336 3.17597 14.8858C3.45163 15 3.80109 15 4.5 15L13.5 15Z"
                  stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        `
      },
      {
        name: "right",
        icon: `
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
            <path d="M13.5 7.5C14.1989 7.5 14.5484 7.5 14.824 7.38582C15.1916 7.23358 15.4836 6.94157 15.6358 6.57402C15.75 6.29837 15.75 5.94891 15.75 5.25C15.75 4.55109 15.75 4.20163 15.6358 3.92598C15.4836 3.55843 15.1916 3.26642 14.824 3.11418C14.5484 3 14.1989 3 13.5 3L7.5 3C6.80109 3 6.45163 3 6.17598 3.11418C5.80843 3.26642 5.51642 3.55843 5.36418 3.92597C5.25 4.20163 5.25 4.55109 5.25 5.25C5.25 5.94891 5.25 6.29837 5.36418 6.57402C5.51642 6.94157 5.80843 7.23358 6.17598 7.38582C6.45163 7.5 6.80109 7.5 7.5 7.5L13.5 7.5Z"
                  stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M13.5 15C14.1989 15 14.5484 15 14.824 14.8858C15.1916 14.7336 15.4836 14.4416 15.6358 14.074C15.75 13.7984 15.75 13.4489 15.75 12.75C15.75 12.0511 15.75 11.7016 15.6358 11.426C15.4836 11.0584 15.1916 10.7664 14.824 10.6142C14.5484 10.5 14.1989 10.5 13.5 10.5H4.5C3.80109 10.5 3.45163 10.5 3.17598 10.6142C2.80843 10.7664 2.51642 11.0584 2.36418 11.426C2.25 11.7016 2.25 12.0511 2.25 12.75C2.25 13.4489 2.25 13.7984 2.36418 14.074C2.51642 14.4416 2.80843 14.7336 3.17597 14.8858C3.45163 15 3.80109 15 4.5 15L13.5 15Z"
                  stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        `
      }
    ].forEach((n) => {
      const a = document.createElement("button");
      a.className = "align-option-button", a.innerHTML = n.icon, this.value === n.name && a.classList.add("selected"), a.addEventListener("click", () => {
        var o;
        i.querySelectorAll(".align-option-button").forEach((l) => l.classList.remove("selected")), a.classList.add("selected"), this.value = n.name, (o = this.onChange) == null || o.call(this, this.value);
      }), i.appendChild(a);
    }), t.appendChild(i), t;
  }
}
class nt extends m {
  constructor(t) {
    super(t), this.inputType = "button";
  }
  draw() {
    const t = document.createElement("button");
    t.className = "button-setting " + (this.props.className || ""), t.textContent = this.props.label, t.addEventListener("click", () => {
      this.props.onClick && this.props.onClick();
    });
    const e = document.createElement("div");
    return e.className = "button-setting-wrapper " + (this.props.wrapperClassName || ""), e.appendChild(t), e;
  }
}
class at extends m {
  constructor(t = {}) {
    super(t), this.inputType = { width: "number", height: "number" }, this.aspectRatio = 1, this.isUpdating = !1;
    const e = t.width || 100, i = t.height || 100;
    this.value || (this.value = {
      width: e,
      height: i
    }), this.minWidth = Math.max(1, t.minWidth || 1), this.maxWidth = t.maxWidth, this.minHeight = Math.max(1, t.minHeight || 1), this.maxHeight = t.maxHeight, this.locked = t.locked ?? !1, (!this.value.width || this.value.width < 1) && (this.value.width = 1), (!this.value.height || this.value.height < 1) && (this.value.height = 1), this.value.height > 0 && (this.aspectRatio = this.value.width / this.value.height), this.widthSetting = new w({
      title: "Width",
      default: this.value.width,
      suffix: "px",
      minValue: this.minWidth,
      maxValue: this.maxWidth,
      icon: _
    }), this.heightSetting = new w({
      title: "Height",
      default: this.value.height,
      suffix: "px",
      minValue: this.minHeight,
      maxValue: this.maxHeight,
      icon: j
    }), this.widthSetting.setOnChange(this.handleWidthChange.bind(this)), this.heightSetting.setOnChange(this.handleHeightChange.bind(this));
  }
  handleWidthChange(t) {
    if (!this.isUpdating) {
      (isNaN(t) || t < this.minWidth) && (t = this.minWidth), this.maxWidth && t > this.maxWidth && (t = this.maxWidth), this.isUpdating = !0;
      try {
        let e = t, i = this.value.height;
        this.locked && this.aspectRatio > 0 && (i = Math.round(e / this.aspectRatio), i < this.minHeight ? (i = this.minHeight, e = Math.round(i * this.aspectRatio), e < this.minWidth ? (e = this.minWidth, i > 0 && (this.aspectRatio = e / i)) : this.maxWidth && e > this.maxWidth && (e = this.maxWidth, i > 0 && (this.aspectRatio = e / i))) : this.maxHeight && i > this.maxHeight && (i = this.maxHeight, e = Math.round(i * this.aspectRatio), e < this.minWidth ? (e = this.minWidth, i > 0 && (this.aspectRatio = e / i)) : this.maxWidth && e > this.maxWidth && (e = this.maxWidth, i > 0 && (this.aspectRatio = e / i)))), this.value = { width: e, height: i }, this.widthSetting.setValue(e), this.locked && this.heightSetting.setValue(i), this.onChange && this.onChange(this.value);
      } finally {
        this.isUpdating = !1;
      }
    }
  }
  handleHeightChange(t) {
    if (!this.isUpdating) {
      (isNaN(t) || t < this.minHeight) && (t = this.minHeight), this.maxHeight && t > this.maxHeight && (t = this.maxHeight), this.isUpdating = !0;
      try {
        let e = t, i = this.value.width;
        this.locked && this.aspectRatio > 0 && (i = Math.round(e * this.aspectRatio), i < this.minWidth ? (i = this.minWidth, e = Math.round(i / this.aspectRatio), e < this.minHeight ? (e = this.minHeight, e > 0 && (this.aspectRatio = i / e)) : this.maxHeight && e > this.maxHeight && (e = this.maxHeight, e > 0 && (this.aspectRatio = i / e))) : this.maxWidth && i > this.maxWidth && (i = this.maxWidth, e = Math.round(i / this.aspectRatio), e < this.minHeight ? (e = this.minHeight, e > 0 && (this.aspectRatio = i / e)) : this.maxHeight && e > this.maxHeight && (e = this.maxHeight, e > 0 && (this.aspectRatio = i / e)))), this.value = { width: i, height: e }, this.locked && this.widthSetting.setValue(i), this.heightSetting.setValue(e), this.onChange && this.onChange(this.value);
      } finally {
        this.isUpdating = !1;
      }
    }
  }
  toggleLock(t) {
    if (this.locked = !this.locked, this.locked && this.value) {
      const { width: i, height: s } = this.value;
      s > 0 && (this.aspectRatio = i / s);
    }
    t.innerHTML = this.getLockSVG(this.locked), t.setAttribute("aria-pressed", String(this.locked)), t.title = this.locked ? "Unlock aspect ratio" : "Lock aspect ratio";
    const e = t.closest(".dimension-setting-container");
    e && (this.locked ? e.classList.add("aspect-locked") : e.classList.remove("aspect-locked"));
  }
  getLockSVG(t) {
    return t ? `
        <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 10 10" fill="none">
          <path d="M2.91663 4.58333V3.33333C2.91663 2.18274 3.84937 1.25 4.99996 1.25C6.00786 1.25 6.84859 1.96573 7.04162 2.91667M3.66663 8.75H6.33329C7.03336 8.75 7.38339 8.75 7.65078 8.61376C7.88598 8.49392 8.07721 8.30269 8.19705 8.06749C8.33329 7.8001 8.33329 7.45007 8.33329 6.75V6.58333C8.33329 5.88327 8.33329 5.53323 8.19705 5.26584C8.07721 5.03064 7.88598 4.83942 7.65078 4.71958C7.38339 4.58333 7.03336 4.58333 6.33329 4.58333H3.66663C2.96656 4.58333 2.61653 4.58333 2.34914 4.71958C2.11394 4.83942 1.92271 5.03064 1.80287 5.26584C1.66663 5.53323 1.66663 5.88327 1.66663 6.58333V6.75C1.66663 7.45007 1.66663 7.8001 1.80287 8.06749C1.92271 8.30269 2.11394 8.49392 2.34914 8.61376C2.61653 8.75 2.96656 8.75 3.66663 8.75Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>` : `
        <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 10 10" fill="none">
          <path d="M2.91663 4.58333V3.33333C2.91663 2.18274 3.84937 1.25 4.99996 1.25M3.66663 8.75H6.33329C7.03336 8.75 7.38339 8.75 7.65078 8.61376C7.88598 8.49392 8.07721 8.30269 8.19705 8.06749C8.33329 7.8001 8.33329 7.45007 8.33329 6.75V6.58333C8.33329 5.88327 8.33329 5.53323 8.19705 5.26584C8.07721 5.03064 7.88598 4.83942 7.65078 4.71958C7.38339 4.58333 7.03336 4.58333 6.33329 4.58333H3.66663C2.96656 4.58333 2.61653 4.58333 2.34914 4.71958C2.11394 4.83942 1.92271 5.03064 1.80287 5.26584C1.66663 5.53323 1.66663 5.88327 1.66663 6.58333V6.75C1.66663 7.45007 1.66663 7.8001 1.80287 8.06749C1.92271 8.30269 2.11394 8.49392 2.34914 8.61376C2.61653 8.75 2.96656 8.75 3.66663 8.75Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>`;
  }
  setValue(t) {
    if (t && typeof t.width == "number" && typeof t.height == "number") {
      let e = Math.max(this.minWidth, t.width);
      this.maxWidth && (e = Math.min(this.maxWidth, e));
      let i = Math.max(this.minHeight, t.height);
      this.maxHeight && (i = Math.min(this.maxHeight, i)), this.value = {
        width: e,
        height: i
      }, this.locked && this.value.height > 0 && (this.aspectRatio = this.value.width / this.value.height), this.isUpdating = !0;
      try {
        this.widthSetting.setValue(this.value.width), this.heightSetting.setValue(this.value.height);
      } finally {
        this.isUpdating = !1;
      }
    }
  }
  draw() {
    const t = document.createElement("div");
    t.className = "dimension-setting-container", this.locked && t.classList.add("aspect-locked");
    const e = this.widthSetting.draw(), i = this.heightSetting.draw(), s = document.createElement("div");
    s.className = "dimension-bracket";
    const n = document.createElement("button");
    return n.className = "dimension-lock-icon", n.setAttribute("type", "button"), n.setAttribute("aria-pressed", String(this.locked)), n.setAttribute(
      "aria-label",
      this.locked ? "Unlock aspect ratio" : "Lock aspect ratio"
    ), n.title = this.locked ? "Unlock aspect ratio" : "Lock aspect ratio", n.innerHTML = this.getLockSVG(this.locked), n.onclick = (a) => {
      a.preventDefault(), this.toggleLock(n);
    }, s.appendChild(n), t.appendChild(e), t.appendChild(s), t.appendChild(i), t;
  }
  isLocked() {
    return this.locked;
  }
  setLocked(t) {
    if (this.locked !== t) {
      if (this.locked = t, this.locked && this.value) {
        const { width: i, height: s } = this.value;
        s > 0 && (this.aspectRatio = i / s);
      }
      const e = document.querySelector(
        ".dimension-setting-container .dimension-lock-icon"
      );
      if (e instanceof HTMLElement) {
        e.innerHTML = this.getLockSVG(this.locked), e.setAttribute("aria-pressed", String(this.locked)), e.title = this.locked ? "Unlock aspect ratio" : "Lock aspect ratio";
        const i = e.closest(".dimension-setting-container");
        i && (this.locked ? i.classList.add("aspect-locked") : i.classList.remove("aspect-locked"));
      }
    }
  }
}
const _ = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M4.5 9.5H13.5M4.5 9.5L6 7.25M4.5 9.5L6 11.75M13.5 9.5L12 7.25M13.5 9.5L12 11.75M15.75 16.25V2.75M2.25 16.25V2.75" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`, j = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M9 14L9 5M9 14L6.75 12.5M9 14L11.25 12.5M9 5L6.75 6.5M9 5L11.25 6.5M15.75 2.75H2.25M15.75 16.25H2.25" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`, y = `
<svg xmlns="http://www.w3.org/2000/svg" width="15" height="16" viewBox="0 0 15 16" fill="none">
  <path d="M5 10.5L7.5 8M7.5 8L10 10.5M7.5 8V13.625M12.5 10.9643C13.2634 10.3338 13.75 9.37996 13.75 8.3125C13.75 6.41402 12.211 4.875 10.3125 4.875C10.1759 4.875 10.0482 4.80375 9.97882 4.68609C9.16379 3.30302 7.65902 2.375 5.9375 2.375C3.34867 2.375 1.25 4.47367 1.25 7.0625C1.25 8.35381 1.77215 9.52317 2.61684 10.371" stroke="#475467" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`, V = `
<svg width="91" height="71" viewBox="0 0 91 71" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect width="91" height="71" rx="4" fill="#F2F4F7"/>
  <path d="M37 31.5L39.5 29M39.5 29L42 31.5M39.5 29V34.625M44.5 31.9643C45.2634 31.3338 45.75 30.38 45.75 29.3125C45.75 27.414 44.211 25.875 42.3125 25.875C42.1759 25.875 42.0482 25.8037 41.9788 25.6861C41.1638 24.303 39.659 23.375 37.9375 23.375C35.3487 23.375 33.25 25.4737 33.25 28.0625C33.25 29.3538 33.7721 30.5232 34.6168 31.371" stroke="#475467" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`, q = `
<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 12 12" fill="none">
  <path d="M8 3V2.6C8 2.03995 8 1.75992 7.89101 1.54601C7.79513 1.35785 7.64215 1.20487 7.45399 1.10899C7.24008 1 6.96005 1 6.4 1H5.6C5.03995 1 4.75992 1 4.54601 1.10899C4.35785 1.20487 4.20487 1.35785 4.10899 1.54601C4 1.75992 4 2.03995 4 2.6V3M5 5.75V8.25M7 5.75V8.25M1.5 3H10.5M9.5 3V8.6C9.5 9.44008 9.5 9.86012 9.33651 10.181C9.1927 10.4632 8.96323 10.6927 8.68099 10.8365C8.36012 11 7.94008 11 7.1 11H4.9C4.05992 11 3.63988 11 3.31901 10.8365C3.03677 10.6927 2.8073 10.4632 2.66349 10.181C2.5 9.86012 2.5 9.44008 2.5 8.6V3" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`;
class U extends m {
  constructor(t = {}) {
    super(t), this.inputType = "button", this.previewWrapper = null, this.previewEl = null, this.emptyStateEl = null, !this.value && t.defaultUrl && t.defaultUrl !== "" && (this.value = t.defaultUrl);
  }
  updatePreviewState(t = null) {
    if (!this.previewWrapper || !this.previewEl || !this.emptyStateEl) return;
    const e = this.previewWrapper.parentElement, i = e == null ? void 0 : e.querySelector(".upload-button"), s = e == null ? void 0 : e.querySelector(
      ".preview-placeholder"
    );
    t && t !== "" ? (this.previewWrapper.classList.add("has-image"), this.previewEl.src = t, this.previewWrapper.style.display = "block", s && s instanceof HTMLElement && (s.style.display = "none"), e && e.classList.remove("no-image"), i && (i.innerHTML = `
          <span class="upload-icon">${y}</span>
          <span class="upload-label">Replace</span>
        `)) : (this.previewWrapper.classList.remove("has-image"), this.previewEl.src = "", this.previewWrapper.style.display = "none", s && s instanceof HTMLElement && (s.style.display = "none"), i && (i.innerHTML = `
          <span class="upload-icon">${y}</span>
          <span class="upload-label">Upload</span>
        `));
  }
  draw() {
    const t = document.createElement("div");
    t.className = "upload-setting-wrapper";
    const e = !!(this.props.title || this.props.icon);
    if (e || t.classList.add("no-label"), e) {
      const c = document.createElement("div");
      if (c.className = "icon-title-container", this.props.icon) {
        const h = this.createIcon(this.props.icon);
        c.appendChild(h);
      }
      if (this.props.title) {
        const h = this.createLabel(this.props.title);
        c.appendChild(h);
      }
      t.appendChild(c);
    }
    const i = document.createElement("div");
    i.className = "preview-button-container";
    const s = this.value && this.value !== "";
    s || i.classList.add("no-image");
    const n = document.createElement("div");
    n.className = "preview-placeholder", n.innerHTML = V, this.previewWrapper = document.createElement("div"), this.previewWrapper.className = "preview-wrapper", this.emptyStateEl = document.createElement("div"), this.emptyStateEl.className = "empty-state", this.emptyStateEl.innerHTML = V, this.previewEl = document.createElement("img"), this.previewEl.className = "upload-preview";
    const a = document.createElement("button");
    a.className = "delete-button", a.type = "button", a.title = "Delete image", a.innerHTML = q, this.previewWrapper.appendChild(this.emptyStateEl), this.previewWrapper.appendChild(this.previewEl), this.previewWrapper.appendChild(a);
    const o = document.createElement("button");
    o.className = "upload-button", o.innerHTML = `
      <span class="upload-icon">${y}</span>
      <span class="upload-label">Upload</span>
    `;
    const l = document.createElement("input");
    return l.type = "file", l.accept = "image/*", l.style.display = "none", i.appendChild(n), i.appendChild(this.previewWrapper), i.appendChild(o), t.appendChild(i), t.appendChild(l), s ? this.updatePreviewState(this.value) : this.updatePreviewState(null), a.onclick = (c) => {
      var h;
      c.stopPropagation(), this.value = "", this.updatePreviewState(null), (h = this.onChange) == null || h.call(this, "");
    }, o.onclick = () => {
      l.click();
    }, l.onchange = async () => {
      var h, u, p;
      const c = (h = l.files) == null ? void 0 : h[0];
      if (c)
        try {
          o.classList.add("loading"), o.disabled = !0;
          const g = new FormData(), d = this.props.formFieldName || "file";
          g.append(d, c, c.name);
          const C = this.props.uploadUrl;
          if (!C)
            throw new Error("No uploadUrl provided to UploadSetting.");
          const v = this.props.requestMethod || "POST", L = { ...this.props.requestHeaders || {} }, E = await (await fetch(C, {
            method: v,
            body: g,
            headers: L
          })).json();
          let x;
          if (this.props.parseResponse)
            x = this.props.parseResponse(E);
          else if (x = (u = E == null ? void 0 : E.data) == null ? void 0 : u.url, !x)
            throw new Error(
              "No URL found in response. Provide a parseResponse if needed."
            );
          this.value = x, this.updatePreviewState(x), (p = this.onChange) == null || p.call(this, x);
        } catch (g) {
          console.error("Error uploading file:", g), this.updatePreviewState(null);
        } finally {
          o.classList.remove("loading"), o.disabled = !1;
        }
    }, t;
  }
}
class ot extends m {
  constructor(t = {}) {
    super(t), this.inputType = "number", this.value = this.value ?? 100, this.numberSetting = new w({
      title: "Height",
      default: this.value,
      suffix: "px",
      minValue: t.minHeight ?? 1,
      maxValue: t.maxHeight,
      icon: F
    }), this.numberSetting.setOnChange((e) => {
      var i;
      isNaN(e) || e < 1 || (this.value = e, (i = this.onChange) == null || i.call(this, this.value));
    });
  }
  draw() {
    return this.numberSetting.draw();
  }
}
const F = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M9 14L9 5M9 14L6.75 12.5M9 14L11.25 12.5M9 5L6.75 6.5M9 5L11.25 6.5M15.75 2.75H2.25M15.75 16.25H2.25" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`;
class lt extends m {
  constructor(t = {}) {
    super(t), this.inputType = "number", this.value = this.value ?? 100, this.numberSetting = new w({
      title: "Width",
      default: this.value,
      suffix: "px",
      minValue: t.minWidth ?? 0,
      maxValue: t.maxWidth,
      icon: z
    }), this.numberSetting.setOnChange((e) => {
      var i;
      isNaN(e) || e < 1 || (this.value = e, (i = this.onChange) == null || i.call(this, this.value));
    });
  }
  draw() {
    return this.numberSetting.draw();
  }
}
const z = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M4.5 9.5H13.5M4.5 9.5L6 7.25M4.5 9.5L6 11.75M13.5 9.5L12 7.25M13.5 9.5L12 11.75M15.75 16.25V2.75M2.25 16.25V2.75" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`, D = `
  <svg xmlns="http://www.w3.org/2000/svg" class="svg-select-api" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-down">
    <polyline points="6 9 12 15 18 9"></polyline>
  </svg>
`;
class ht extends m {
  constructor(t = {}) {
    super(t), this.inputType = "select", this._options = [], this.isOpen = !1, this.selectedOptionIndex = null, this.optionsListEl = null, this.svgContainer = null, this.buttonEl = null, this.isLoading = !1, this.container = null, this.hasInitializedOptions = !1, this.initializeOptions(t), t.default !== void 0 && (this.value = t.default, this.selectedOptionIndex = this._options.findIndex(
      (e) => JSON.stringify(e.value) === JSON.stringify(t.default)
    )), t.onChange && this.setOnChange(t.onChange), t.detectChange && (this.detectChangeCallback = t.detectChange);
  }
  initializeOptions(t) {
    this.hasInitializedOptions || (this._options = [], t.options && (this._options = [...t.options]), t.getOptions && this._options.push(...t.getOptions()), t.getOptionsAsync ? (this.isLoading = !0, t.default !== void 0 && (this.value = t.default)) : t.default !== void 0 && (this.selectedOptionIndex = this._options.findIndex(
      (e) => JSON.stringify(e.value) === JSON.stringify(t.default)
    )), this.hasInitializedOptions = !0);
  }
  createOption(t, e) {
    const i = document.createElement("li");
    i.classList.add("select-api-option"), i.textContent = t.name, i.dataset.index = String(e);
    const s = document.createElement("input");
    return s.type = "radio", s.classList.add("select-api-radio"), s.name = "select-api-radio-group", i.appendChild(s), this.selectedOptionIndex === e && (s.checked = !0), i;
  }
  draw() {
    const t = document.createElement("div");
    t.classList.add("select-api-container"), this.container = t;
    const e = document.createElement("div");
    if (e.classList.add("select-api-button"), this.props.title) {
      e.classList.add("has-label");
      const n = document.createElement("div");
      n.className = "select-label", n.textContent = this.props.title, e.appendChild(n);
      const a = document.createElement("span");
      a.className = "select-value", this.isLoading ? a.textContent = this.props.loadingText || "Loading options..." : a.textContent = this.selectedOptionIndex !== null ? this._options[this.selectedOptionIndex].name : "Select an option", e.appendChild(a);
    } else {
      const n = document.createElement("span");
      this.isLoading ? n.textContent = this.props.loadingText || "Loading options..." : n.textContent = this.selectedOptionIndex !== null ? this._options[this.selectedOptionIndex].name : "Select an option", e.appendChild(n);
    }
    e.onclick = () => {
      var n, a;
      this.isLoading || (this.isOpen = !this.isOpen, (n = this.optionsListEl) == null || n.classList.toggle("open", this.isOpen), (a = this.svgContainer) == null || a.classList.toggle("open", this.isOpen));
    }, t.appendChild(e), this.buttonEl = e;
    const i = document.createElement("ul");
    i.classList.add("select-api-options"), this._options.forEach((n, a) => {
      const o = this.createOption(n, a);
      o.onclick = (l) => this.selectApiOption(l, a, e), i.appendChild(o);
    }), t.appendChild(i);
    const s = document.createElement("div");
    return s.classList.add("svg-container"), s.innerHTML = D, t.appendChild(s), s.onclick = () => {
      var n, a;
      this.isLoading || (this.isOpen = !this.isOpen, (n = this.optionsListEl) == null || n.classList.toggle("open", this.isOpen), (a = this.svgContainer) == null || a.classList.toggle("open", this.isOpen));
    }, this.optionsListEl = i, this.svgContainer = s, this.props.getOptionsAsync && !this.hasInitializedOptions ? (this.isLoading = !0, this.updateButtonText(), this.props.getOptionsAsync().then((n) => {
      this._options.push(...n), this.isLoading = !1, this.value !== void 0 && this.selectedOptionIndex === null && (this.selectedOptionIndex = this._options.findIndex(
        (a) => JSON.stringify(a.value) === JSON.stringify(this.value)
      )), this.updateOptionsList(), this.updateButtonText();
    }).catch((n) => {
      console.error("Failed to fetch async options:", n), this.isLoading = !1, this.updateButtonText("Failed to load options");
    })) : this.props.getOptionsAsync && this._options.length <= 1 && (this.isLoading = !0, this.updateButtonText(), this.props.getOptionsAsync().then((n) => {
      const a = new Set(this._options.map((l) => JSON.stringify(l.value))), o = n.filter((l) => !a.has(JSON.stringify(l.value)));
      this._options.push(...o), this.isLoading = !1, this.value !== void 0 && this.selectedOptionIndex === null && (this.selectedOptionIndex = this._options.findIndex(
        (l) => JSON.stringify(l.value) === JSON.stringify(this.value)
      )), this.updateOptionsList(), this.updateButtonText();
    }).catch((n) => {
      console.error("Failed to fetch async options:", n), this.isLoading = !1, this.updateButtonText("Failed to load options");
    })), t;
  }
  selectApiOption(t, e, i) {
    var n, a;
    const s = this._options[e];
    if (s) {
      const o = s.value;
      this.value = o, this.onChange && this.onChange(o), this.detectChangeCallback && this.detectChangeCallback(o), this.selectedOptionIndex = e, this.isOpen = !1, this.updateButtonText(), (n = this.optionsListEl) == null || n.classList.remove("open"), (a = this.svgContainer) == null || a.classList.remove("open"), this.optionsListEl && this.optionsListEl.querySelectorAll(
        ".select-api-radio"
      ).forEach((c, h) => {
        c.checked = h === e;
      });
    }
  }
  updateOptionsList() {
    if (this.optionsListEl) {
      if (this.optionsListEl.innerHTML = "", this._options.length === 0) {
        const t = document.createElement("li");
        t.classList.add("select-api-option", "empty-message"), t.textContent = "No options available", this.optionsListEl.appendChild(t);
        return;
      }
      this._options.forEach((t, e) => {
        const i = this.createOption(t, e);
        this.selectedOptionIndex === e && i.classList.add("selected"), i.onclick = (s) => {
          this.buttonEl && this.selectApiOption(s, e, this.buttonEl);
        }, i.tabIndex = 0, i.addEventListener("keydown", (s) => {
          (s.key === "Enter" || s.key === " ") && (s.preventDefault(), this.buttonEl && this.selectApiOption(s, e, this.buttonEl));
        }), this.optionsListEl.appendChild(i);
      });
    }
  }
  updateButtonText(t) {
    if (!this.buttonEl) return;
    const e = this.buttonEl.querySelector(".select-value"), i = this.buttonEl.classList.contains("has-label"), s = this.buttonEl.querySelector(".select-label");
    if (this.isLoading) {
      this.buttonEl.classList.add("loading");
      const a = this.props.loadingText || "Loading options...";
      if (e)
        e.textContent = a;
      else if (i && this.props.title && !s) {
        this.buttonEl.innerHTML = "";
        const o = document.createElement("div");
        o.className = "select-label", o.textContent = this.props.title, this.buttonEl.appendChild(o);
        const l = document.createElement("span");
        l.className = "select-value", l.textContent = a, this.buttonEl.appendChild(l);
      } else
        this.buttonEl.textContent = a;
      return;
    }
    this.buttonEl.classList.remove("loading", "error");
    let n;
    if (t ? ((t.includes("Failed") || t.includes("Error")) && this.buttonEl.classList.add("error"), n = t) : this.selectedOptionIndex !== null && this._options[this.selectedOptionIndex] ? n = this._options[this.selectedOptionIndex].name : n = "Select an option", e)
      e.textContent = n;
    else if (i && this.props.title && !s) {
      this.buttonEl.innerHTML = "";
      const a = document.createElement("div");
      a.className = "select-label", a.textContent = this.props.title, this.buttonEl.appendChild(a);
      const o = document.createElement("span");
      o.className = "select-value", o.textContent = n, this.buttonEl.appendChild(o);
    } else
      this.buttonEl.textContent = n;
  }
  setDetectChange(t) {
    this.detectChangeCallback = t;
  }
}
class rt extends m {
  constructor(t) {
    super(t), this.inputType = "text", this.value = t.default ?? !1;
  }
  draw() {
    const t = document.createElement("div");
    t.className = "toggle-setting-container", this.props.icon && t.classList.add("toggle-with-icon");
    const e = document.createElement("div");
    if (e.className = "toggle-label", this.props.icon) {
      const a = document.createElement("span");
      a.className = "toggle-icon", a.innerHTML = this.props.icon, e.appendChild(a);
    }
    if (this.props.title) {
      const a = document.createElement("span");
      a.textContent = this.props.title, e.appendChild(a);
    }
    t.appendChild(e);
    const i = document.createElement("label");
    i.className = "toggle-switch";
    const s = document.createElement("input");
    s.type = "checkbox", s.checked = this.value ?? !1, s.addEventListener("change", () => {
      this.value = s.checked, this.onChange && this.onChange(this.value);
    });
    const n = document.createElement("span");
    return n.className = "toggle-slider", i.appendChild(s), i.appendChild(n), t.appendChild(i), t;
  }
}
const Z = `<svg width="16" height="15" viewBox="0 0 16 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1.25 7.5H1.2575M4.625 7.5H4.6325M11.375 7.5H11.3825M8 7.5H8.0075M14.75 7.5H14.7575M14.75 14.25V13.65C14.75 12.8099 14.75 12.3899 14.5865 12.069C14.4427 11.7868 14.2132 11.5573 13.931 11.4135C13.6101 11.25 13.1901 11.25 12.35 11.25H3.65C2.80992 11.25 2.38988 11.25 2.06901 11.4135C1.78677 11.5573 1.5573 11.7868 1.41349 12.069C1.25 12.3899 1.25 12.8099 1.25 13.65V14.25M14.75 0.75V1.35C14.75 2.19008 14.75 2.61012 14.5865 2.93099C14.4427 3.21323 14.2132 3.4427 13.931 3.58651C13.6101 3.75 13.1901 3.75 12.35 3.75H3.65C2.80992 3.75 2.38988 3.75 2.06901 3.58651C1.78677 3.4427 1.5573 3.21323 1.41349 2.93099C1.25 2.61012 1.25 2.19008 1.25 1.35V0.75" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`;
class ct extends m {
  constructor(t = {}) {
    super(t), this.inputType = "number", this.inputValues = {};
  }
  //   private logAllValues(): void {
  //     console.log('-- All Gap Values --');
  //     Object.entries(this.inputValues).forEach(([key, value]) => {
  //       console.log(`${key}: ${value}${this.props.suffix || ''}`);
  //     });
  //     console.log('-------------------');
  //   }
  draw() {
    const t = document.createElement("div");
    if (t.classList.add("gap-settings-container"), this.props.title || this.props.title === void 0) {
      const e = document.createElement("div");
      e.classList.add("gap-settings-title"), e.textContent = this.props.title || "Spacing", t.appendChild(e);
    }
    if (this.props.rowGap !== !1) {
      const e = this.createGapInput("Row Gap", this.value ?? 0);
      t.appendChild(e), this.inputValues["Row Gap"] = this.value ?? 0;
    }
    if (this.props.columnGap !== !1) {
      const e = this.createGapInput("Column Gap", this.value ?? 0);
      t.appendChild(e), this.inputValues["Column Gap"] = this.value ?? 0;
    }
    if (this.props.rowGap === void 0 && this.props.columnGap === void 0) {
      const e = this.createGapInput("Gap", this.value ?? 0);
      t.appendChild(e), this.inputValues.Gap = this.value ?? 0;
    }
    return t;
  }
  createGapInput(t, e) {
    const i = document.createElement("div");
    i.classList.add("gap-input-wrapper");
    const s = document.createElement("div");
    s.classList.add("gap-label-container");
    const n = document.createElement("div");
    n.classList.add("gap-setting-icon"), n.innerHTML = this.props.icon || Z, s.appendChild(n);
    const a = document.createElement("label");
    a.classList.add("gap-input-label"), a.textContent = t, s.appendChild(a), i.appendChild(s);
    const o = (u) => {
      this.props.minValue !== void 0 && (u.min = String(this.props.minValue)), this.props.maxValue !== void 0 && (u.max = String(this.props.maxValue)), this.props.className && u.classList.add(this.props.className), u.addEventListener("input", () => {
        var C;
        const p = this.props.minValue ?? 0, g = this.props.maxValue ?? 100;
        let d = Number(u.value);
        d < p && (d = p), d > g && (d = g), u.value = String(d), this.value = d, this.inputValues[t] = d, console.log(`Gap Setting (${t}): ${d}${this.props.suffix || ""}`), (C = this.onChange) == null || C.call(this, d);
      });
    }, l = this.createInput({
      value: e,
      inputType: this.inputType,
      inputClassName: "gap-setting-input " + (this.props.inputClassName || ""),
      wrapperClassName: "gap-setting-inner-wrapper " + (this.props.wrapperClassName || ""),
      inputCustomizer: o
    });
    if (!this.props.suffix || this.props.suffix === "none")
      return i.appendChild(l), i;
    l.classList.add("suffix-wrapper");
    const c = l.querySelector("input.gap-setting-input");
    c && (c.style.paddingRight = "35px");
    const h = document.createElement("span");
    return h.className = "suffix-label", h.textContent = this.props.suffix, l.appendChild(h), i.appendChild(l), i;
  }
}
class dt extends m {
  constructor(t) {
    var e;
    if (!t.tabs)
      throw new Error("Tabs array is required for TabsSettings");
    super(t), this.inputType = "tabs", this.tabs = [], this.activeTabId = "", this.tabsContainer = null, this.contentContainer = null, this.previousTabId = "", this.tabValues = /* @__PURE__ */ new Map(), this.settingGroups = /* @__PURE__ */ new Map(), this.tabs = t.tabs, this.activeTabId = t.activeTabId || ((e = this.tabs[0]) == null ? void 0 : e.id) || "", this.previousTabId = this.activeTabId, this.onStateChangeCallback = t.onStateChange, this.value = {}, this.tabs.forEach((i) => {
      if (i.custom) {
        const s = {};
        Object.entries(i.settings).forEach(([n, a]) => {
          a instanceof m ? s[n] = a.value : a instanceof f && (s[n] = a.getValues());
        }), this.tabValues.set(i.id, s), this.value[i.id] = s;
      } else {
        const s = new f({
          title: i.title || i.label,
          collapsed: i.collapsed,
          settings: i.settings,
          description: i.description,
          icon: i.icon,
          main: i.main,
          custom: i.custom,
          hideCondition: i.hideCondition,
          onBlur: i.onBlur
        });
        this.settingGroups.set(i.id, s);
        const n = s.getValues();
        this.tabValues.set(i.id, n), this.value[i.id] = n;
      }
    }), t.onChange && this.setOnChange(t.onChange);
  }
  draw() {
    const t = document.createElement("div");
    t.classList.add("tabs-settings-container"), this.props.className && t.classList.add(this.props.className);
    const e = document.createElement("div");
    e.classList.add("tabs-header"), this.tabsContainer = e, this.tabs.forEach((s) => {
      const n = document.createElement("button");
      n.classList.add("tab-button"), s.id === this.activeTabId && n.classList.add("active"), n.textContent = s.label, n.onclick = () => this.handleTabClick(s.id), e.appendChild(n);
    }), t.appendChild(e);
    const i = document.createElement("div");
    return i.classList.add("tab-content"), this.contentContainer = i, this.tabs.forEach((s) => {
      const n = document.createElement("div");
      if (n.classList.add("tab-panel"), s.id === this.activeTabId && n.classList.add("active"), s.custom)
        Object.entries(s.settings).forEach(([a, o]) => {
          if (o instanceof m)
            n.appendChild(o.draw()), o.setOnChange(() => {
              this.updateTabValues(s.id), this.handleTabChange(s.id);
            });
          else if (o instanceof f) {
            const l = o.draw();
            n.appendChild(l), this.addChangeListeners(o, s.id);
          }
        });
      else {
        const a = this.settingGroups.get(s.id);
        if (a) {
          const o = a.draw();
          n.appendChild(o), this.addChangeListeners(a, s.id);
        }
      }
      i.appendChild(n);
    }), t.appendChild(i), t;
  }
  addChangeListeners(t, e) {
    const i = t.settings;
    Object.values(i).forEach((s) => {
      s instanceof f ? this.addChangeListeners(s, e) : s.setOnChange(() => {
        this.updateTabValues(e), this.handleTabChange(e);
      });
    });
  }
  updateTabValues(t) {
    const e = this.tabs.find((i) => i.id === t);
    if (e)
      if (e.custom) {
        const i = {};
        Object.entries(e.settings).forEach(([s, n]) => {
          n instanceof m ? i[s] = n.value : n instanceof f && (i[s] = n.getValues());
        }), this.tabValues.set(t, i), this.value = {
          ...this.value,
          [t]: i
        };
      } else {
        const i = this.settingGroups.get(t);
        if (i) {
          const s = i.getValues();
          this.tabValues.set(t, s), this.value = {
            ...this.value,
            [t]: s
          };
        }
      }
  }
  handleTabChange(t) {
    var i, s;
    const e = this.tabValues.get(t) || {};
    (i = this.onStateChangeCallback) == null || i.call(this, t, e), (s = this.onChangeCallback) == null || s.call(this, {
      tabId: t,
      contentValues: e,
      previousTabId: this.previousTabId
    });
  }
  handleTabClick(t) {
    var i;
    if (t === this.activeTabId) return;
    this.previousTabId = this.activeTabId, this.activeTabId = t;
    const e = (i = this.tabsContainer) == null ? void 0 : i.querySelectorAll(".tab-button");
    if (e == null || e.forEach((s) => {
      var n;
      s instanceof HTMLElement && s.classList.toggle(
        "active",
        s.textContent === ((n = this.tabs.find((a) => a.id === t)) == null ? void 0 : n.label)
      );
    }), this.contentContainer) {
      const s = this.contentContainer.querySelectorAll(".tab-panel"), n = this.tabs.findIndex(
        (o) => o.id === this.previousTabId
      ), a = this.tabs.findIndex((o) => o.id === t);
      s.forEach((o, l) => {
        o instanceof HTMLElement && (l === a ? (o.classList.add("active"), o.classList.remove("slide-left", "slide-right")) : l === n ? (o.classList.remove("active"), o.classList.add(
          a > n ? "slide-left" : "slide-right"
        )) : o.classList.remove("active", "slide-left", "slide-right"));
      });
    }
    this.handleTabChange(t);
  }
  setOnChange(t) {
    return this.onChangeCallback = t, this;
  }
  setOnStateChange(t) {
    return this.onStateChangeCallback = t, this;
  }
}
const J = `
<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M5.625 9.5H5.6325M12.375 9.5H12.3825M9 9.5H9.0075M9 12.875H9.0075M9 6.125H9.0075M2.25 6.35L2.25 12.65C2.25 13.9101 2.25 14.5402 2.49524 15.0215C2.71095 15.4448 3.05516 15.789 3.47852 16.0048C3.95982 16.25 4.58988 16.25 5.85 16.25H12.15C13.4101 16.25 14.0402 16.25 14.5215 16.0048C14.9448 15.789 15.289 15.4448 15.5048 15.0215C15.75 14.5402 15.75 13.9101 15.75 12.65V6.35C15.75 5.08988 15.75 4.45982 15.5048 3.97852C15.289 3.55516 14.9448 3.21095 14.5215 2.99524C14.0402 2.75 13.4101 2.75 12.15 2.75L5.85 2.75C4.58988 2.75 3.95982 2.75 3.47852 2.99524C3.05516 3.21095 2.71095 3.55516 2.49524 3.97852C2.25 4.45982 2.25 5.08988 2.25 6.35Z" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`, P = `
<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M6 2.75H5.85C4.58988 2.75 3.95982 2.75 3.47852 2.99524C3.05516 3.21095 2.71095 3.55516 2.49524 3.97852C2.25 4.45982 2.25 5.08988 2.25 6.35V6.5M6 16.25H5.85C4.58988 16.25 3.95982 16.25 3.47852 16.0048C3.05516 15.789 2.71095 15.4448 2.49524 15.0215C2.25 14.5402 2.25 13.9101 2.25 12.65V12.5M15.75 6.5V6.35C15.75 5.08988 15.75 4.45982 15.5048 3.97852C15.289 3.55516 14.9448 3.21095 14.5215 2.99524C14.0402 2.75 13.4101 2.75 12.15 2.75H12M15.75 12.5V12.65C15.75 13.9101 15.75 14.5402 15.5048 15.0215C15.289 15.4448 14.9448 15.789 14.5215 16.0048C14.0402 16.25 13.4101 16.25 12.15 16.25H12" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`;
class pt extends f {
  constructor(t) {
    super({
      title: "Border",
      collapsed: t == null ? void 0 : t.collapsed,
      hideCondition: t == null ? void 0 : t.hideCondition,
      settings: {
        size: new w({
          title: "Size",
          icon: P,
          default: (t == null ? void 0 : t.size) ?? 0,
          suffix: "px"
        }),
        color: new S({
          default: (t == null ? void 0 : t.color) ?? "0, 0, 30"
        }),
        opacity: new M({
          default: (t == null ? void 0 : t.opacity) ?? 100,
          minValue: 0,
          maxValue: 100
        }),
        radius: new w({
          title: "Radius",
          icon: J,
          default: (t == null ? void 0 : t.radius) ?? 12,
          suffix: "px"
        })
      }
    });
  }
  /**
   * Optional helper to generate CSS from the current settings.
   */
  getCssCode() {
    const t = this.settings.color.value ?? "#000000", e = this.settings.opacity.value ?? 100, i = this.settings.radius.value ?? 0, s = this.settings.size.value ?? 0;
    return `
      border-color: ${t};
      border-width: ${s}px;
      border-radius: ${i}px;
      opacity: ${e / 100};
    `;
  }
}
const X = `
<svg xmlns="http://www.w3.org/2000/svg" width="14" height="13" viewBox="0 0 14 13" fill="none">
  <path d="M1 2.75C1 2.05109 1 1.70163 1.11418 1.42597C1.26642 1.05843 1.55843 0.766422 1.92597 0.614181C2.20163 0.5 2.55109 0.5 3.25 0.5H10.75C11.4489 0.5 11.7984 0.5 12.074 0.614181C12.4416 0.766422 12.7336 1.05843 12.8858 1.42597C13 1.70163 13 2.05109 13 2.75M4.75 12.5H9.25M7 0.5V12.5" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`, Q = `
<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M3 5.75C3 5.05109 3 4.70163 3.11418 4.42597C3.26642 4.05843 3.55843 3.76642 3.92597 3.61418C4.20163 3.5 4.55109 3.5 5.25 3.5H12.75C13.4489 3.5 13.7984 3.5 14.074 3.61418C14.4416 3.76642 14.7336 4.05843 14.8858 4.42597C15 4.70163 15 5.05109 15 5.75M6 15.5H12M7.6875 3.5V15.5M10.3125 3.5V15.5" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>  
`, Y = `
<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M6 5.75H12M9 5.75V13.25M5.85 16.25H12.15C13.4101 16.25 14.0402 16.25 14.5215 16.0048C14.9448 15.789 15.289 15.4448 15.5048 15.0215C15.75 14.5402 15.75 13.9101 15.75 12.65V6.35C15.75 5.08988 15.75 4.45982 15.5048 3.97852C15.289 3.55516 14.9448 3.21095 14.5215 2.99524C14.0402 2.75 13.4101 2.75 12.15 2.75H5.85C4.58988 2.75 3.95982 2.75 3.47852 2.99524C3.05516 3.21095 2.71095 3.55516 2.49524 3.97852C2.25 4.45982 2.25 5.08988 2.25 6.35V12.65C2.25 13.9101 2.25 14.5402 2.49524 15.0215C2.71095 15.4448 3.05516 15.789 3.47852 16.0048C3.95982 16.25 4.58988 16.25 5.85 16.25Z" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`;
class ut extends f {
  constructor(t = {}) {
    super({
      title: t.title || "Typography",
      collapsed: t.collapsed,
      hideCondition: t.hideCondition,
      settings: {
        color: new S({
          default: t.colorDefault ?? "0, 0, 30"
        }),
        opacity: new M({
          default: t.colorOpacityDefault ?? 100
        }),
        fontFamily: new N({
          title: "Font",
          icon: X,
          default: t.fontFamilyDefault ?? "Satoshi",
          options: t.fontFamilyOptions ?? [
            { name: "Satoshi", value: "Satoshi" },
            { name: "Arial", value: "Arial" },
            { name: "Roboto", value: "Roboto" }
          ],
          getOptions: t.fontFamilyGetOptions,
          getOptionsAsync: t.fontFamilyGetOptionsAsync
        }),
        fontWeight: new N({
          title: "Weight",
          icon: Q,
          default: t.fontWeightDefault ?? "400",
          options: t.fontWeightOptions ?? [
            { name: "Regular", value: "400" },
            { name: "Medium", value: "500" },
            { name: "Bold", value: "600" }
          ],
          getOptions: t.fontWeightGetOptions,
          getOptionsAsync: t.fontWeightGetOptionsAsync
        }),
        fontSize: new w({
          title: "Size",
          icon: Y,
          default: t.fontSizeDefault ?? 12,
          suffix: "px"
        }),
        align: new G({
          title: "Align",
          default: t.alignDefault ?? "center"
        })
      }
    });
  }
  getCssCode() {
    const t = this.settings.color.value ?? "#000000", e = this.settings.opacity.value ?? 100, i = this.settings.fontFamily.value ?? "Satoshi", s = this.settings.fontWeight.value ?? "bold", n = this.settings.fontSize.value ?? 12, a = this.settings.align.value ?? "left";
    return `
				color: ${t};
				opacity: ${e / 100};  
				font-family: ${i};
				font-weight: ${s};
				font-size: ${n}px;
				text-align: ${a};
			`;
  }
}
class k extends m {
  constructor(t) {
    super({
      ...t,
      default: t.default !== void 0 ? t.default : "auto"
    }), this.inputType = "number", this.value = t.default !== void 0 ? t.default : "auto";
  }
  draw() {
    const t = this.value === "auto" ? "text" : "number", e = (o) => {
      this.value !== "auto" && (this.props.minValue !== void 0 && (o.min = String(this.props.minValue)), this.props.maxValue !== void 0 && (o.max = String(this.props.maxValue)), this.props.className && o.classList.add(this.props.className), o.addEventListener("input", () => {
        const l = this.props.minValue ?? Number.MIN_SAFE_INTEGER, c = this.props.maxValue ?? Number.MAX_SAFE_INTEGER;
        let h = Number(o.value);
        h < l && (h = l), h > c && (h = c), o.value = String(h);
      }));
    }, i = this.createInput({
      value: this.value,
      inputType: t,
      title: this.props.title,
      icon: this.props.icon,
      inputClassName: "number-setting-input " + (this.props.inputClassName || ""),
      wrapperClassName: "number-setting-wrapper " + (this.props.wrapperClassName || ""),
      inputCustomizer: e,
      placeholder: this.value === "auto" ? "auto" : ""
    });
    if (!this.props.suffix || this.props.suffix === "none")
      return i;
    i.classList.add("suffix-wrapper");
    const s = i.querySelector(
      "input.number-setting-input"
    );
    s && (s.style.paddingRight = "35px");
    const n = document.createElement("span");
    n.className = "suffix-label", n.textContent = this.props.suffix, i.appendChild(n);
    const a = i.querySelector("input");
    return a && (a.oninput = (o) => {
      const l = o.target.value.trim();
      if (l.toLowerCase() === "auto")
        this.value = "auto";
      else {
        const c = Number(l);
        isNaN(c) || (this.value = c);
      }
      this.onChange && this.onChange(this.value);
    }), i;
  }
}
class gt extends f {
  constructor(t) {
    super({
      title: "Margins",
      collapsed: t == null ? void 0 : t.collapsed,
      hideCondition: t == null ? void 0 : t.hideCondition,
      settings: {
        marginTop: new k({
          title: "Top",
          icon: K,
          suffix: "px",
          default: (t == null ? void 0 : t.marginTop) ?? "auto"
        }),
        marginRight: new k({
          title: "Right",
          icon: tt,
          suffix: "px",
          default: (t == null ? void 0 : t.marginRight) ?? 0
        }),
        marginBottom: new k({
          title: "Bottom",
          icon: et,
          suffix: "px",
          default: (t == null ? void 0 : t.marginBottom) ?? 0
        }),
        marginLeft: new k({
          title: "Left",
          icon: it,
          suffix: "px",
          default: (t == null ? void 0 : t.marginLeft) ?? 0
        })
      }
    });
  }
  getCssCode() {
    const t = typeof this.settings.marginTop.value == "number" ? `${this.settings.marginTop.value}px` : this.settings.marginTop.value, e = typeof this.settings.marginRight.value == "number" ? `${this.settings.marginRight.value}px` : this.settings.marginRight.value, i = typeof this.settings.marginBottom.value == "number" ? `${this.settings.marginBottom.value}px` : this.settings.marginBottom.value, s = typeof this.settings.marginLeft.value == "number" ? `${this.settings.marginLeft.value}px` : this.settings.marginLeft.value;
    return `
      margin-top: ${t};
      margin-right: ${e};
      margin-bottom: ${i};
      margin-left: ${s};
    `;
  }
}
const K = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M2.25 16.25H2.2575M2.25 9.5H2.2575M2.25 12.875H2.2575M2.25 6.125H2.2575M5.625 16.25H5.6325M5.625 9.5H5.6325M12.375 16.25H12.3825M12.375 9.5H12.3825M9 16.25H9.0075M9 9.5H9.0075M9 12.875H9.0075M9 6.125H9.0075M15.75 16.25H15.7575M15.75 9.5H15.7575M15.75 12.875H15.7575M15.75 6.125H15.7575M15.75 2.75H2.25" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`, tt = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M5.625 2.75H5.6325M5.625 9.5H5.6325M5.625 16.25H5.6325M12.375 2.75H12.3825M12.375 9.5H12.3825M12.375 16.25H12.3825M9 2.75H9.0075M9 9.5H9.0075M9 16.25H9.0075M9 12.875H9.0075M9 6.125H9.0075M2.25 2.75H2.2575M2.25 9.5H2.2575M2.25 16.25H2.2575M2.25 12.875H2.2575M2.25 6.125H2.2575M15.75 16.25V2.75" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`, et = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M2.25 2.75H2.2575M2.25 9.5H2.2575M2.25 12.875H2.2575M2.25 6.125H2.2575M5.625 2.75H5.6325M5.625 9.5H5.6325M12.375 2.75H12.3825M12.375 9.5H12.3825M9 2.75H9.0075M9 9.5H9.0075M9 12.875H9.0075M9 6.125H9.0075M15.75 2.75H15.7575M15.75 9.5H15.7575M15.75 12.875H15.7575M15.75 6.125H15.7575M15.75 16.25H2.25" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`, it = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="19" viewBox="0 0 18 19" fill="none">
  <path d="M5.625 2.75H5.6325M5.625 9.5H5.6325M5.625 16.25H5.6325M12.375 2.75H12.3825M12.375 9.5H12.3825M12.375 16.25H12.3825M9 2.75H9.0075M9 9.5H9.0075M9 16.25H9.0075M9 12.875H9.0075M9 6.125H9.0075M15.75 2.75H15.7575M15.75 9.5H15.7575M15.75 16.25H15.7575M15.75 12.875H15.7575M15.75 6.125H15.7575M2.25 16.25V2.75" stroke="#667085" stroke-linecap="round" stroke-linejoin="round"/>
</svg>`;
class st extends f {
  constructor(t, e, i) {
    super({
      title: `Tab ${t + 1}`,
      hideCondition: i == null ? void 0 : i.hideCondition,
      collapsed: i == null ? void 0 : i.collapsed,
      settings: {
        name: new H({
          title: "Tab Name",
          default: `Tab ${t + 1}`
        }),
        content: new H({
          title: "Content",
          default: ""
        })
      }
    }), this.onDeleteCallback = e;
  }
  draw() {
    const t = super.draw(), e = t.querySelector(".setting-group-arrow");
    e && e.parentElement && e.parentElement.removeChild(e);
    const i = t.querySelector(".setting-group-title");
    if (i) {
      const s = document.createElement("div");
      s.className = "tab-delete-container";
      const n = document.createElement("button");
      n.className = "tab-delete-button", n.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="#f87171" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="trash-icon">
          <polyline points="3 6 5 6 21 6"></polyline>
          <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6"></path>
          <path d="M10 11v6"></path>
          <path d="M14 11v6"></path>
          <path d="M9 6V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2"></path>
        </svg>
      `, n.onclick = () => {
        var o;
        return (o = this.onDeleteCallback) == null ? void 0 : o.call(this);
      }, s.appendChild(n);
      const a = i.querySelector("h3");
      a ? a.insertAdjacentElement("afterend", s) : i.appendChild(s);
    }
    return t;
  }
}
class mt extends f {
  // Store the rendered element
  constructor(t) {
    super({
      title: "Tabs",
      settings: {},
      hideCondition: t == null ? void 0 : t.hideCondition,
      collapsed: t == null ? void 0 : t.collapsed
    }), this.tabs = [], this._el = null, this.addTab();
  }
  /** Adds a new tab. */
  addTab(t) {
    const e = this.tabs.length, i = new st(
      e,
      () => this.removeTab(i),
      t
    );
    this.tabs.push(i), this.settings[`Tab ${e + 1}`] = i;
  }
  /** Removes a specific tab. */
  removeTab(t) {
    const e = this.tabs.indexOf(t);
    e >= 0 && (this.tabs.splice(e, 1), delete this.settings[`Tab ${e + 1}`], this.relabelTabs(), this.rerender());
  }
  /** Relabels tabs sequentially after removal. */
  relabelTabs() {
    this.settings = {}, this.tabs.forEach((t, e) => {
      t.title = `Tab ${e + 1}`, this.settings[`Tab ${e + 1}`] = t;
    });
  }
  /**
   * Override draw() so we can store the created DOM element
   * and add the "Add Tab" button in a container positioned at the bottom-right.
   */
  draw() {
    const t = super.draw();
    this._el = t;
    const e = document.createElement("div");
    e.className = "tabs-add-btn-container";
    const i = document.createElement("button");
    return i.className = "tabs-add-button", i.innerHTML = `
      <span class="add-icon">
        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#667085">
          <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
          <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
          <g id="SVGRepo_iconCarrier">
            <g id="Edit / Add_Plus">
              <path id="Vector" d="M6 12H12M12 12H18M12 12V18M12 12V6" stroke="#667085" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
            </g>
          </g>
        </svg>
      </span>
      <span class="add-label">Add Tab</span>
    `, i.onclick = () => {
      this.addTab(), this.rerender();
    }, e.appendChild(i), t.appendChild(e), t;
  }
  /**
   * Re-renders the inner settings content based on the current tabs.
   */
  rerender() {
    if (!this._el) return;
    const t = this._el.querySelector(".setting-group-content");
    t && (t.innerHTML = "", Object.keys(this.settings).forEach((e) => {
      const i = this.settings[e];
      t.appendChild(i.draw());
    }));
  }
}
class Ct extends f {
  /**
   * Constructs a new BackgroundSettingSet.
   *
   * @param props An object that may include default values for each setting and additional
   *              properties for the UploadSetting via `uploadProps`.
   *
   * Example:
   * {
   *    backgroundImage: 'https://example.com/myimage.png',
   *    opacity: 80,
   *    backgroundColor: "0, 0, 30",
   *    opacityBG: 90,
   *    uploadProps: {
   *      uploadUrl: 'https://st-admapi.onaim.io/api/File/UploadImage',
   *      requestMethod: 'POST',
   *      requestHeaders: {
   *        accept: 'text/plain',
   *        Authorization: 'bearer <your-token-here>',
   *      },
   *      formFieldName: 'File',
   *      parseResponse: (data) => data.data.url,
   *    }
   * }
   */
  constructor(t) {
    super({
      title: "Background Image",
      collapsed: t == null ? void 0 : t.collapsed,
      hideCondition: t == null ? void 0 : t.hideCondition,
      settings: {
        backgroundImage: new U({
          ...t == null ? void 0 : t.uploadProps,
          default: (t == null ? void 0 : t.backgroundImage) ?? ""
        }),
        opacity: new M({
          default: (t == null ? void 0 : t.opacity) ?? 100
        }),
        backgroundColor: new S({
          default: (t == null ? void 0 : t.backgroundColor) ?? "0, 0, 30"
        }),
        opacityBG: new M({
          default: (t == null ? void 0 : t.opacityBG) ?? 100
        })
      }
    });
  }
  /**
   * Override draw() to reorder the child settings and insert an "OR" label between the two sections.
   */
  draw() {
    const t = super.draw(), e = t.querySelector(".setting-group-content");
    if (!e) return t;
    const i = Array.from(e.children), [s, n, a, o] = i;
    e.innerHTML = "", e.appendChild(s), e.appendChild(n);
    const l = document.createElement("div");
    return l.className = "bgset-or-label", l.textContent = "OR", e.appendChild(l), e.appendChild(a), e.appendChild(o), t;
  }
  /**
   * Helper method to generate CSS based on the current settings.
   */
  getCssCode() {
    const t = this.settings.backgroundImage.value || "", e = this.settings.opacity.value ?? 100, i = this.settings.backgroundColor.value || "0, 0, 30", s = this.settings.opacityBG.value ?? 100;
    return t ? `
        background-image: url("${t}");
        background-size: cover;
        background-position: center;
        opacity: ${e / 100};
      ` : `
        background-color: ${i};
        opacity: ${s / 100};
      `;
  }
}
export {
  G as AlignSetting,
  Ct as BackgroundSettingSet,
  pt as BorderSettingSet,
  nt as ButtonSetting,
  S as ColorSetting,
  at as DimensionSetting,
  ct as GapSetting,
  ut as HeaderTypographySettingSet,
  ot as HeightSetting,
  gt as MarginSettingGroup,
  w as NumberSetting,
  M as OpacitySetting,
  ht as SelectApiSettings,
  N as SelectSetting,
  m as Setting,
  f as SettingGroup,
  H as StringSetting,
  mt as TabsContainerGroup,
  dt as TabsSettings,
  rt as Toggle,
  U as UploadSetting,
  lt as WidthSetting,
  R as iterateSettings
};
