declare class AlignSetting_2 extends Setting<AlignValue, AlignSettingProps> {
    inputType: InputTypes;
    constructor(props?: AlignSettingProps);
    draw(): HTMLElement;
}
export { AlignSetting_2 as AlignSetting }

export declare interface AlignSettingProps extends SettingProps<AlignValue> {
}

export declare type AlignValue = 'left' | 'center' | 'right';

export declare class BackgroundSettingSet extends SettingGroup<{
    backgroundImage: UploadSetting;
    opacity: OpacitySetting;
    backgroundColor: ColorSetting;
    opacityBG: OpacitySetting;
}> {
    /**
     * Constructs a new BackgroundSettingSet.
     *
     * @param props An object that may include default values for each setting and additional
     *              properties for the UploadSetting via `uploadProps`.
     *
     * Example:
     * {
     *    backgroundImage: 'https://example.com/myimage.png',
     *    opacity: 80,
     *    backgroundColor: "0, 0, 30",
     *    opacityBG: 90,
     *    uploadProps: {
     *      uploadUrl: 'https://st-admapi.onaim.io/api/File/UploadImage',
     *      requestMethod: 'POST',
     *      requestHeaders: {
     *        accept: 'text/plain',
     *        Authorization: 'bearer <your-token-here>',
     *      },
     *      formFieldName: 'File',
     *      parseResponse: (data) => data.data.url,
     *    }
     * }
     */
    constructor(props?: {
        backgroundImage?: string;
        opacity?: number;
        backgroundColor?: string;
        opacityBG?: number;
        uploadProps?: UploadSettingProps;
        collapsed?: boolean;
        hideCondition?: () => boolean;
    });
    /**
     * Override draw() to reorder the child settings and insert an "OR" label between the two sections.
     */
    draw(): HTMLElement;
    /**
     * Helper method to generate CSS based on the current settings.
     */
    getCssCode(): string;
}

/**
 * A SettingGroup for configuring "Border" settings.
 * It includes child settings for color, opacity, radius, and size.
 * You can pass default values to override the internal defaults.
 */
export declare class BorderSettingSet extends SettingGroup<{
    color: ColorSetting;
    opacity: OpacitySetting;
    radius: NumberSetting;
    size: NumberSetting;
}> {
    constructor(defaults?: {
        color?: string;
        opacity?: number;
        radius?: number;
        size?: number;
        collapsed?: boolean;
        hideCondition?: () => boolean;
    });
    /**
     * Optional helper to generate CSS from the current settings.
     */
    getCssCode(): string;
}

export declare class ButtonSetting extends Setting<void, ButtonSettingProps> {
    inputType: InputTypes;
    constructor(props: ButtonSettingProps);
    draw(): HTMLElement;
}

export declare interface ButtonSettingProps extends SettingProps<void> {
    label: string;
    onClick?: () => void;
    className?: string;
    wrapperClassName?: string;
}

export declare class ColorSetting extends StringSetting {
    inputType: InputTypes;
    detectChange?: (value: string | undefined) => void;
    constructor(props: ColorSettingProps);
    private hexToRgb;
    private rgbToHex;
    draw(): HTMLElement;
}

export declare interface ColorSettingProps extends StringSettingsProps {
    detectChange?: (value: string | undefined) => void;
}

export declare class DimensionSetting extends Setting<DimensionValue, DimensionSettingProps> {
    inputType: {
        readonly width: "number";
        readonly height: "number";
    };
    private widthSetting;
    private heightSetting;
    private minWidth;
    private maxWidth?;
    private minHeight;
    private maxHeight?;
    private locked;
    private aspectRatio;
    private isUpdating;
    constructor(props?: DimensionSettingProps);
    private handleWidthChange;
    private handleHeightChange;
    private toggleLock;
    private getLockSVG;
    setValue(newValue: DimensionValue): void;
    draw(): HTMLElement;
    isLocked(): boolean;
    setLocked(locked: boolean): void;
}

export declare interface DimensionSettingProps extends SettingProps<DimensionValue> {
    locked?: boolean;
    minWidth?: number;
    maxWidth?: number;
    minHeight?: number;
    maxHeight?: number;
    width?: number;
    height?: number;
}

export declare interface DimensionValue {
    width: number;
    height: number;
}

export declare class GapSetting extends Setting<number, GapSettingsProps> {
    inputType: InputTypes;
    private inputValues;
    constructor(props?: GapSettingsProps);
    draw(): HTMLElement;
    private createGapInput;
}

export declare interface GapSettingsProps extends SettingProps<number> {
    minValue?: number;
    maxValue?: number;
    className?: string;
    inputClassName?: string;
    wrapperClassName?: string;
    suffix?: GapSuffix;
    title?: string;
    icon?: string;
    rowGap?: boolean;
    columnGap?: boolean;
    onChange?: (value: number) => void;
}

export declare type GapSuffix = 'px' | 'em' | 'rem' | '%' | 'vh' | 'vw' | 'pt' | 'none';

declare interface HeaderTypographySettings {
    title?: string;
    colorDefault?: string;
    colorOpacityDefault?: number;
    fontFamilyDefault?: string;
    fontFamilyOptions?: SelectOption[];
    fontFamilyGetOptions?: () => SelectOption[];
    fontFamilyGetOptionsAsync?: () => Promise<SelectOption[]>;
    fontWeightDefault?: string;
    fontWeightOptions?: SelectOption[];
    fontWeightGetOptions?: () => SelectOption[];
    fontWeightGetOptionsAsync?: () => Promise<SelectOption[]>;
    fontSizeDefault?: number;
    alignDefault?: AlignValue;
    collapsed?: boolean;
    hideCondition?: () => boolean;
}

export declare class HeaderTypographySettingSet extends SettingGroup<{
    color: ColorSetting;
    opacity: OpacitySetting;
    fontFamily: SelectSetting<string>;
    fontWeight: SelectSetting<string>;
    fontSize: NumberSetting;
    align: AlignSetting_2;
}> {
    constructor(props?: HeaderTypographySettings);
    getCssCode(): string;
}

export declare class HeightSetting extends Setting<number, HeightSettingProps> {
    inputType: "number";
    private numberSetting;
    constructor(props?: HeightSettingProps);
    draw(): HTMLElement;
}

export declare interface HeightSettingProps extends SettingProps<number> {
    minHeight?: number;
    maxHeight?: number;
}

export declare interface IChangable<T> {
    setOnChange(onChange: (value: T) => void): void;
}

export declare interface IDrawable {
    draw(): HTMLElement;
}

declare type InputProps = {
    iconClassName?: string;
    labelClassName?: string;
    value: any;
    inputType: InputTypes;
    title?: string;
    icon?: string;
    inputCustomizer?: (input: HTMLInputElement) => void;
    inputClassName?: string;
    wrapperClassName?: string;
    placeholder?: string;
};

export declare type InputTypes = "number" | "text" | "select" | "color" | "date" | "button";

export declare function iterateSettings<T extends Record<string, Setting<any, any> | SettingGroup<any>>>(settings: T, callback: (key: string, setting: Setting<any, any> | SettingGroup<any>) => void): void;

declare class MarginNumberSetting extends Setting<number | 'auto' | undefined, MarginNumberSettingsProps> {
    inputType: InputTypes;
    constructor(props: MarginNumberSettingsProps);
    draw(): HTMLElement;
}

declare interface MarginNumberSettingsProps extends SettingProps<number | 'auto'> {
    minValue?: number;
    maxValue?: number;
    className?: string;
    inputClassName?: string;
    wrapperClassName?: string;
    suffix?: NumberSuffix;
    default: number | 'auto';
}

export declare class MarginSettingGroup extends SettingGroup<{
    marginTop: MarginNumberSetting;
    marginRight: MarginNumberSetting;
    marginBottom: MarginNumberSetting;
    marginLeft: MarginNumberSetting;
}> {
    constructor(defaults?: {
        marginTop?: number | 'auto';
        marginRight?: number | 'auto';
        marginBottom?: number | 'auto';
        marginLeft?: number | 'auto';
        collapsed?: boolean;
        hideCondition?: () => boolean;
    });
    getCssCode(): string;
}

export declare class NumberSetting extends Setting<number, NumberSettingsProps> {
    inputType: InputTypes;
    constructor(props?: NumberSettingsProps);
    draw(): HTMLElement;
}

export declare interface NumberSettingsProps extends SettingProps<number> {
    minValue?: number;
    maxValue?: number;
    className?: string;
    inputClassName?: string;
    wrapperClassName?: string;
    suffix?: NumberSuffix;
}

export declare type NumberSuffix = 'px' | 'em' | 'rem' | '%' | 'vh' | 'vw' | 'pt' | 'none';

export declare class OpacitySetting extends NumberSetting {
    inputType: InputTypes;
    constructor(props: OpacitySettingProps);
}

export declare interface OpacitySettingProps extends NumberSettingsProps {
}

export declare type Primitive = string | number | boolean | symbol | bigint | null | undefined;

export declare interface SelectApiOption {
    name: string;
    value: string | object;
}

export declare interface SelectApiSettingProps<T = any> extends SettingProps<T> {
    options?: SelectApiOption[];
    getOptions?: () => SelectApiOption[];
    getOptionsAsync?: () => Promise<SelectApiOption[]>;
    loadingText?: string;
    onChange?: (value: T) => void;
    detectChange?: (value: T | undefined) => void;
}

export declare class SelectApiSettings<T = any> extends Setting<T, SelectApiSettingProps<T>> {
    inputType: T extends Primitive ? InputTypes : Record<keyof T, InputTypes>;
    private _options;
    private isOpen;
    private selectedOptionIndex;
    private optionsListEl;
    private svgContainer;
    private buttonEl;
    private isLoading;
    private container;
    private hasInitializedOptions;
    private detectChangeCallback?;
    constructor(props?: SelectApiSettingProps<T>);
    private initializeOptions;
    private createOption;
    draw(): HTMLElement;
    private selectApiOption;
    private updateOptionsList;
    private updateButtonText;
    setDetectChange(callback: (value: T | undefined) => void): void;
}

export declare interface SelectOption {
    name: string;
    value: string | object;
}

export declare class SelectSetting<T = any> extends Setting<T, SelectSettingProps<T>> {
    inputType: T extends Primitive ? InputTypes : Record<keyof T, InputTypes>;
    private _options;
    private isOpen;
    private selectedOptionIndex;
    private optionsListEl;
    private svgContainer;
    private buttonEl;
    private isLoading;
    private container;
    private clickOutsideListener;
    constructor(props?: SelectSettingProps<T>);
    private createOption;
    draw(): HTMLElement;
    private selectOption;
    private updateOptionsList;
    private updateButtonText;
    destroy(): void;
}

export declare interface SelectSettingProps<T = any> extends SettingProps<T> {
    options?: SelectOption[];
    getOptions?: () => SelectOption[];
    getOptionsAsync?: () => Promise<SelectOption[]>;
    loadingText?: string;
    placeholder?: string;
}

export declare abstract class Setting<T, P extends SettingProps<T>> implements IDrawable, IChangable<T> {
    protected props: P;
    destroy(): void;
    protected inputEl?: HTMLInputElement;
    id: string;
    value: T | undefined;
    title: string | undefined;
    abstract inputType: T extends Primitive ? InputTypes : Record<keyof T, InputTypes>;
    onChange: ((value: T) => void) | undefined;
    constructor(props?: P);
    setOnChange(onChange: (value: T) => void): Setting<T, P>;
    setValue(newValue: T): void;
    abstract draw(): HTMLElement;
    createInput(props: InputProps): HTMLElement;
    createLabel(title: string, className?: string): HTMLSpanElement;
    createIcon(icon: string, className?: string): HTMLSpanElement;
}

export declare class SettingGroup<T extends Record<string, Setting<any, any> | SettingGroup<any>>> implements IDrawable, IChangable<T> {
    title: string;
    settings: T;
    description?: string;
    icon?: string;
    id: string;
    onChange?: ((value: T) => void) | undefined;
    onBlur?: () => void;
    private isCollapsed;
    private isMain;
    private elementRef;
    private hideCondition?;
    private static hiddenElements;
    private isHidden;
    private custom;
    initialValues: Record<string, any>;
    private changeTimeout;
    private isHandlingChange;
    private changeHandlers;
    private blurTimeout;
    private lastValues;
    private lastChangeTime;
    private readonly CHANGE_DEBOUNCE;
    constructor(groupProps: SettingGroupProps<T>);
    static hide(): void;
    static show(): void;
    setOnChange(onChange: (value: T) => void): SettingGroup<T>;
    setOnBlur(onBlur: () => void): SettingGroup<T>;
    private handleBlur;
    cleanup(): void;
    calculateChanges(oldValues: Record<string, any>, newValues: Record<string, any>): Record<string, any>;
    hide(): void;
    show(): void;
    getValues<K extends keyof T>(childKey?: K): any;
    draw(): HTMLElement;
    collapse(): void;
    expand(): void;
    updateVisibility(): void;
    toggle(): void;
}

export declare type SettingGroupProps<T> = {
    title: string;
    settings: T;
    id?: string;
    collapsed?: boolean;
    main?: boolean;
    description?: string;
    icon?: string;
    hideCondition?: () => boolean;
    onBlur?: () => void;
    custom?: boolean;
};

export declare interface SettingProps<T> {
    default?: T;
    title?: string;
    placeholder?: string;
    icon?: string;
    inputProps?: InputProps;
    id?: string;
    detectChange?: (value: T | undefined) => void;
}

export declare class StringSetting extends Setting<string, StringSettingsProps> {
    inputType: InputTypes;
    constructor(props?: StringSettingsProps);
    draw(): HTMLElement;
}

export declare interface StringSettingsProps extends SettingProps<string> {
    maxLength?: number;
    value?: string;
    className?: string;
    inputClassName?: string;
    wrapperClassName?: string;
    onChange?: (value: string) => void;
}

declare interface TabChangeValue {
    tabId: string;
    contentValues: Record<string, any>;
    previousTabId: string;
}

declare interface TabItem {
    id: string;
    label: string;
    title?: string;
    settings: Record<string, Setting<any, any> | SettingGroup<any>>;
    collapsed?: boolean;
    description?: string;
    icon?: string;
    main?: boolean;
    custom?: boolean;
    hideCondition?: () => boolean;
    onBlur?: () => void;
}

export declare class TabsContainerGroup extends SettingGroup<Record<string, TabSettingGroup>> {
    private tabs;
    private _el;
    constructor(props?: {
        hideCondition?: () => boolean;
        collapsed?: boolean;
    });
    /** Adds a new tab. */
    addTab(props?: {
        hideCondition?: () => boolean;
        collapsed?: boolean;
    }): void;
    /** Removes a specific tab. */
    removeTab(tab: TabSettingGroup): void;
    /** Relabels tabs sequentially after removal. */
    private relabelTabs;
    /**
     * Override draw() so we can store the created DOM element
     * and add the "Add Tab" button in a container positioned at the bottom-right.
     */
    draw(): HTMLElement;
    /**
     * Re-renders the inner settings content based on the current tabs.
     */
    rerender(): void;
}

declare class TabSettingGroup extends SettingGroup<{
    name: StringSetting;
    content: StringSetting;
}> {
    private onDeleteCallback?;
    constructor(index: number, onDelete: () => void, props?: {
        hideCondition?: () => boolean;
        collapsed?: boolean;
    });
    draw(): HTMLElement;
}

export declare class TabsSettings<T = any> extends Setting<T, TabsSettingsProps<T>> {
    inputType: T extends Primitive ? InputTypes : Record<keyof T, InputTypes>;
    private tabs;
    private activeTabId;
    private tabsContainer;
    private contentContainer;
    private onChangeCallback?;
    private onStateChangeCallback?;
    private previousTabId;
    private tabValues;
    private settingGroups;
    constructor(props: TabsSettingsProps<T>);
    draw(): HTMLElement;
    private addChangeListeners;
    private updateTabValues;
    private handleTabChange;
    private handleTabClick;
    setOnChange(onChange: (value: T) => void): this;
    setOnStateChange(onStateChange: (tabId: string, values: Record<string, any>) => void): this;
}

declare interface TabsSettingsProps<T = TabChangeValue> extends SettingProps<T> {
    tabs: TabItem[];
    activeTabId?: string;
    onChange?: (value: T) => void;
    onStateChange?: (tabId: string, values: Record<string, any>) => void;
    className?: string;
}

export declare class Toggle extends Setting<boolean, ToggleSettingProps> {
    inputType: InputTypes;
    constructor(props: ToggleSettingProps);
    draw(): HTMLElement;
}

export declare interface ToggleSettingProps extends SettingProps<boolean> {
    title?: string;
    icon?: string;
    default?: boolean;
}

export declare class UploadSetting extends Setting<string, UploadSettingProps> {
    inputType: InputTypes;
    private previewWrapper;
    private previewEl;
    private emptyStateEl;
    constructor(props?: UploadSettingProps);
    private updatePreviewState;
    draw(): HTMLElement;
}

export declare interface UploadSettingProps extends SettingProps<string> {
    defaultUrl?: string;
    uploadUrl?: string;
    requestMethod?: string;
    requestHeaders?: Record<string, string>;
    formFieldName?: string;
    parseResponse?: (responseData: any) => string;
}

export declare class WidthSetting extends Setting<number, WidthSettingProps> {
    inputType: "number";
    private numberSetting;
    constructor(props?: WidthSettingProps);
    draw(): HTMLElement;
}

export declare interface WidthSettingProps extends SettingProps<number> {
    minWidth?: number;
    maxWidth?: number;
}

export { }
